# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class AccessLogAggregates(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "avg",
            "min",
            "max",
            "sum",
        }
        
        class properties:
            sum = schemas.Int64Schema
            min = schemas.Int64Schema
            max = schemas.Int64Schema
            avg = schemas.Float64Schema
            __annotations__ = {
                "sum": sum,
                "min": min,
                "max": max,
                "avg": avg,
            }
    
    avg: MetaOapg.properties.avg
    min: MetaOapg.properties.min
    max: MetaOapg.properties.max
    sum: MetaOapg.properties.sum
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sum"]) -> MetaOapg.properties.sum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["min"]) -> MetaOapg.properties.min: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max"]) -> MetaOapg.properties.max: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avg"]) -> MetaOapg.properties.avg: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sum", "min", "max", "avg", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sum"]) -> MetaOapg.properties.sum: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["min"]) -> MetaOapg.properties.min: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max"]) -> MetaOapg.properties.max: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avg"]) -> MetaOapg.properties.avg: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sum", "min", "max", "avg", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        avg: typing.Union[MetaOapg.properties.avg, decimal.Decimal, int, float, ],
        min: typing.Union[MetaOapg.properties.min, decimal.Decimal, int, ],
        max: typing.Union[MetaOapg.properties.max, decimal.Decimal, int, ],
        sum: typing.Union[MetaOapg.properties.sum, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AccessLogAggregates':
        return super().__new__(
            cls,
            *args,
            avg=avg,
            min=min,
            max=max,
            sum=sum,
            _configuration=_configuration,
            **kwargs,
        )
