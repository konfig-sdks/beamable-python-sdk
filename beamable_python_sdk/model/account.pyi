# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class Account(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "password",
            "projects",
            "user",
        }
        
        class properties:
            password = schemas.StrSchema
            user = schemas.StrSchema
        
            @staticmethod
            def projects() -> typing.Type['AccountProjects']:
                return AccountProjects
            
            
            class inFlight(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['InFlightMessage']:
                        return InFlightMessage
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['InFlightMessage'], typing.List['InFlightMessage']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'inFlight':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'InFlightMessage':
                    return super().__getitem__(i)
            createdTimeMillis = schemas.Int64Schema
            realmId = schemas.StrSchema
            email = schemas.StrSchema
            roleString = schemas.StrSchema
        
            @staticmethod
            def deviceIds() -> typing.Type['AccountDeviceIds']:
                return AccountDeviceIds
            privilegedAccount = schemas.BoolSchema
            country = schemas.StrSchema
            wasMigrated = schemas.BoolSchema
            id = schemas.Int64Schema
            
            
            class gamerTags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['GamerTagAssociation']:
                        return GamerTagAssociation
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['GamerTagAssociation'], typing.List['GamerTagAssociation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gamerTags':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'GamerTagAssociation':
                    return super().__getitem__(i)
            language = schemas.StrSchema
            
            
            class roles(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RoleMapping']:
                        return RoleMapping
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['RoleMapping'], typing.List['RoleMapping']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'roles':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RoleMapping':
                    return super().__getitem__(i)
            updatedTimeMillis = schemas.Int64Schema
            
            
            class thirdParties(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ThirdPartyAssociation']:
                        return ThirdPartyAssociation
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ThirdPartyAssociation'], typing.List['ThirdPartyAssociation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'thirdParties':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ThirdPartyAssociation':
                    return super().__getitem__(i)
            deviceId = schemas.StrSchema
            userName = schemas.StrSchema
            heartbeat = schemas.Int64Schema
            created = schemas.Int64Schema
            __annotations__ = {
                "password": password,
                "user": user,
                "projects": projects,
                "inFlight": inFlight,
                "createdTimeMillis": createdTimeMillis,
                "realmId": realmId,
                "email": email,
                "roleString": roleString,
                "deviceIds": deviceIds,
                "privilegedAccount": privilegedAccount,
                "country": country,
                "wasMigrated": wasMigrated,
                "id": id,
                "gamerTags": gamerTags,
                "language": language,
                "roles": roles,
                "updatedTimeMillis": updatedTimeMillis,
                "thirdParties": thirdParties,
                "deviceId": deviceId,
                "userName": userName,
                "heartbeat": heartbeat,
                "created": created,
            }
    
    password: MetaOapg.properties.password
    projects: 'AccountProjects'
    user: MetaOapg.properties.user
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projects"]) -> 'AccountProjects': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inFlight"]) -> MetaOapg.properties.inFlight: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdTimeMillis"]) -> MetaOapg.properties.createdTimeMillis: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["realmId"]) -> MetaOapg.properties.realmId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roleString"]) -> MetaOapg.properties.roleString: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deviceIds"]) -> 'AccountDeviceIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privilegedAccount"]) -> MetaOapg.properties.privilegedAccount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wasMigrated"]) -> MetaOapg.properties.wasMigrated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gamerTags"]) -> MetaOapg.properties.gamerTags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roles"]) -> MetaOapg.properties.roles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedTimeMillis"]) -> MetaOapg.properties.updatedTimeMillis: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thirdParties"]) -> MetaOapg.properties.thirdParties: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deviceId"]) -> MetaOapg.properties.deviceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["heartbeat"]) -> MetaOapg.properties.heartbeat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["password", "user", "projects", "inFlight", "createdTimeMillis", "realmId", "email", "roleString", "deviceIds", "privilegedAccount", "country", "wasMigrated", "id", "gamerTags", "language", "roles", "updatedTimeMillis", "thirdParties", "deviceId", "userName", "heartbeat", "created", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projects"]) -> 'AccountProjects': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inFlight"]) -> typing.Union[MetaOapg.properties.inFlight, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdTimeMillis"]) -> typing.Union[MetaOapg.properties.createdTimeMillis, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["realmId"]) -> typing.Union[MetaOapg.properties.realmId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roleString"]) -> typing.Union[MetaOapg.properties.roleString, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deviceIds"]) -> typing.Union['AccountDeviceIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privilegedAccount"]) -> typing.Union[MetaOapg.properties.privilegedAccount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wasMigrated"]) -> typing.Union[MetaOapg.properties.wasMigrated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gamerTags"]) -> typing.Union[MetaOapg.properties.gamerTags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roles"]) -> typing.Union[MetaOapg.properties.roles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedTimeMillis"]) -> typing.Union[MetaOapg.properties.updatedTimeMillis, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thirdParties"]) -> typing.Union[MetaOapg.properties.thirdParties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deviceId"]) -> typing.Union[MetaOapg.properties.deviceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userName"]) -> typing.Union[MetaOapg.properties.userName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["heartbeat"]) -> typing.Union[MetaOapg.properties.heartbeat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["password", "user", "projects", "inFlight", "createdTimeMillis", "realmId", "email", "roleString", "deviceIds", "privilegedAccount", "country", "wasMigrated", "id", "gamerTags", "language", "roles", "updatedTimeMillis", "thirdParties", "deviceId", "userName", "heartbeat", "created", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        password: typing.Union[MetaOapg.properties.password, str, ],
        projects: 'AccountProjects',
        user: typing.Union[MetaOapg.properties.user, str, ],
        inFlight: typing.Union[MetaOapg.properties.inFlight, list, tuple, schemas.Unset] = schemas.unset,
        createdTimeMillis: typing.Union[MetaOapg.properties.createdTimeMillis, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        realmId: typing.Union[MetaOapg.properties.realmId, str, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        roleString: typing.Union[MetaOapg.properties.roleString, str, schemas.Unset] = schemas.unset,
        deviceIds: typing.Union['AccountDeviceIds', schemas.Unset] = schemas.unset,
        privilegedAccount: typing.Union[MetaOapg.properties.privilegedAccount, bool, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        wasMigrated: typing.Union[MetaOapg.properties.wasMigrated, bool, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        gamerTags: typing.Union[MetaOapg.properties.gamerTags, list, tuple, schemas.Unset] = schemas.unset,
        language: typing.Union[MetaOapg.properties.language, str, schemas.Unset] = schemas.unset,
        roles: typing.Union[MetaOapg.properties.roles, list, tuple, schemas.Unset] = schemas.unset,
        updatedTimeMillis: typing.Union[MetaOapg.properties.updatedTimeMillis, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        thirdParties: typing.Union[MetaOapg.properties.thirdParties, list, tuple, schemas.Unset] = schemas.unset,
        deviceId: typing.Union[MetaOapg.properties.deviceId, str, schemas.Unset] = schemas.unset,
        userName: typing.Union[MetaOapg.properties.userName, str, schemas.Unset] = schemas.unset,
        heartbeat: typing.Union[MetaOapg.properties.heartbeat, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Account':
        return super().__new__(
            cls,
            *args,
            password=password,
            projects=projects,
            user=user,
            inFlight=inFlight,
            createdTimeMillis=createdTimeMillis,
            realmId=realmId,
            email=email,
            roleString=roleString,
            deviceIds=deviceIds,
            privilegedAccount=privilegedAccount,
            country=country,
            wasMigrated=wasMigrated,
            id=id,
            gamerTags=gamerTags,
            language=language,
            roles=roles,
            updatedTimeMillis=updatedTimeMillis,
            thirdParties=thirdParties,
            deviceId=deviceId,
            userName=userName,
            heartbeat=heartbeat,
            created=created,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.account_device_ids import AccountDeviceIds
from beamable_python_sdk.model.account_projects import AccountProjects
from beamable_python_sdk.model.gamer_tag_association import GamerTagAssociation
from beamable_python_sdk.model.in_flight_message import InFlightMessage
from beamable_python_sdk.model.role_mapping import RoleMapping
from beamable_python_sdk.model.third_party_association import ThirdPartyAssociation
