# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class AccountUpdate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "hasThirdPartyToken",
        }
        
        class properties:
            hasThirdPartyToken = schemas.BoolSchema
            thirdParty = schemas.StrSchema
            country = schemas.StrSchema
            language = schemas.StrSchema
        
            @staticmethod
            def gamerTagAssoc() -> typing.Type['GamerTagAssociation']:
                return GamerTagAssociation
            token = schemas.StrSchema
            deviceId = schemas.StrSchema
            userName = schemas.StrSchema
            __annotations__ = {
                "hasThirdPartyToken": hasThirdPartyToken,
                "thirdParty": thirdParty,
                "country": country,
                "language": language,
                "gamerTagAssoc": gamerTagAssoc,
                "token": token,
                "deviceId": deviceId,
                "userName": userName,
            }
    
    hasThirdPartyToken: MetaOapg.properties.hasThirdPartyToken
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasThirdPartyToken"]) -> MetaOapg.properties.hasThirdPartyToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thirdParty"]) -> MetaOapg.properties.thirdParty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gamerTagAssoc"]) -> 'GamerTagAssociation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deviceId"]) -> MetaOapg.properties.deviceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["hasThirdPartyToken", "thirdParty", "country", "language", "gamerTagAssoc", "token", "deviceId", "userName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasThirdPartyToken"]) -> MetaOapg.properties.hasThirdPartyToken: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thirdParty"]) -> typing.Union[MetaOapg.properties.thirdParty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gamerTagAssoc"]) -> typing.Union['GamerTagAssociation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token"]) -> typing.Union[MetaOapg.properties.token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deviceId"]) -> typing.Union[MetaOapg.properties.deviceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userName"]) -> typing.Union[MetaOapg.properties.userName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["hasThirdPartyToken", "thirdParty", "country", "language", "gamerTagAssoc", "token", "deviceId", "userName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        hasThirdPartyToken: typing.Union[MetaOapg.properties.hasThirdPartyToken, bool, ],
        thirdParty: typing.Union[MetaOapg.properties.thirdParty, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        language: typing.Union[MetaOapg.properties.language, str, schemas.Unset] = schemas.unset,
        gamerTagAssoc: typing.Union['GamerTagAssociation', schemas.Unset] = schemas.unset,
        token: typing.Union[MetaOapg.properties.token, str, schemas.Unset] = schemas.unset,
        deviceId: typing.Union[MetaOapg.properties.deviceId, str, schemas.Unset] = schemas.unset,
        userName: typing.Union[MetaOapg.properties.userName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AccountUpdate':
        return super().__new__(
            cls,
            *args,
            hasThirdPartyToken=hasThirdPartyToken,
            thirdParty=thirdParty,
            country=country,
            language=language,
            gamerTagAssoc=gamerTagAssoc,
            token=token,
            deviceId=deviceId,
            userName=userName,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.gamer_tag_association import GamerTagAssociation
