# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class AdminPlayerStatus(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "score",
            "stage",
            "tier",
            "rank",
            "nextCycleStartMs",
            "playerId",
        }
        
        class properties:
            stage = schemas.IntSchema
            tier = schemas.IntSchema
            rank = schemas.IntSchema
            score = schemas.NumberSchema
            playerId = schemas.IntSchema
            nextCycleStartMs = schemas.IntSchema
            tournamentId = schemas.StrSchema
            
            
            class unclaimedRewards(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TournamentReward']:
                        return TournamentReward
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TournamentReward'], typing.List['TournamentReward']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'unclaimedRewards':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TournamentReward':
                    return super().__getitem__(i)
            contentId = schemas.StrSchema
            __annotations__ = {
                "stage": stage,
                "tier": tier,
                "rank": rank,
                "score": score,
                "playerId": playerId,
                "nextCycleStartMs": nextCycleStartMs,
                "tournamentId": tournamentId,
                "unclaimedRewards": unclaimedRewards,
                "contentId": contentId,
            }
    
    score: MetaOapg.properties.score
    stage: MetaOapg.properties.stage
    tier: MetaOapg.properties.tier
    rank: MetaOapg.properties.rank
    nextCycleStartMs: MetaOapg.properties.nextCycleStartMs
    playerId: MetaOapg.properties.playerId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stage"]) -> MetaOapg.properties.stage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tier"]) -> MetaOapg.properties.tier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rank"]) -> MetaOapg.properties.rank: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playerId"]) -> MetaOapg.properties.playerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextCycleStartMs"]) -> MetaOapg.properties.nextCycleStartMs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tournamentId"]) -> MetaOapg.properties.tournamentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unclaimedRewards"]) -> MetaOapg.properties.unclaimedRewards: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contentId"]) -> MetaOapg.properties.contentId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["stage", "tier", "rank", "score", "playerId", "nextCycleStartMs", "tournamentId", "unclaimedRewards", "contentId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stage"]) -> MetaOapg.properties.stage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tier"]) -> MetaOapg.properties.tier: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rank"]) -> MetaOapg.properties.rank: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playerId"]) -> MetaOapg.properties.playerId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextCycleStartMs"]) -> MetaOapg.properties.nextCycleStartMs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tournamentId"]) -> typing.Union[MetaOapg.properties.tournamentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unclaimedRewards"]) -> typing.Union[MetaOapg.properties.unclaimedRewards, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contentId"]) -> typing.Union[MetaOapg.properties.contentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["stage", "tier", "rank", "score", "playerId", "nextCycleStartMs", "tournamentId", "unclaimedRewards", "contentId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        score: typing.Union[MetaOapg.properties.score, decimal.Decimal, int, float, ],
        stage: typing.Union[MetaOapg.properties.stage, decimal.Decimal, int, ],
        tier: typing.Union[MetaOapg.properties.tier, decimal.Decimal, int, ],
        rank: typing.Union[MetaOapg.properties.rank, decimal.Decimal, int, ],
        nextCycleStartMs: typing.Union[MetaOapg.properties.nextCycleStartMs, decimal.Decimal, int, ],
        playerId: typing.Union[MetaOapg.properties.playerId, decimal.Decimal, int, ],
        tournamentId: typing.Union[MetaOapg.properties.tournamentId, str, schemas.Unset] = schemas.unset,
        unclaimedRewards: typing.Union[MetaOapg.properties.unclaimedRewards, list, tuple, schemas.Unset] = schemas.unset,
        contentId: typing.Union[MetaOapg.properties.contentId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AdminPlayerStatus':
        return super().__new__(
            cls,
            *args,
            score=score,
            stage=stage,
            tier=tier,
            rank=rank,
            nextCycleStartMs=nextCycleStartMs,
            playerId=playerId,
            tournamentId=tournamentId,
            unclaimedRewards=unclaimedRewards,
            contentId=contentId,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.tournament_reward import TournamentReward
