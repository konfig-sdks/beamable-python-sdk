# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class Announcement(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            summary = schemas.StrSchema
            title = schemas.StrSchema
            body = schemas.StrSchema
            channel = schemas.StrSchema
            start_date = schemas.StrSchema
        
            @staticmethod
            def gift() -> typing.Type['PlayerReward']:
                return PlayerReward
            mongo_start_date = schemas.IntSchema
            
            
            class stat_requirements(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PlayerStatRequirement']:
                        return PlayerStatRequirement
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PlayerStatRequirement'], typing.List['PlayerStatRequirement']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'stat_requirements':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PlayerStatRequirement':
                    return super().__getitem__(i)
            mongo_end_date = schemas.IntSchema
            symbol = schemas.StrSchema
        
            @staticmethod
            def clientData() -> typing.Type['AnnouncementClientData']:
                return AnnouncementClientData
        
            @staticmethod
            def validationErrors() -> typing.Type['AnnouncementValidationErrors']:
                return AnnouncementValidationErrors
            end_date = schemas.StrSchema
            
            
            class attachments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AnnouncementAttachment']:
                        return AnnouncementAttachment
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AnnouncementAttachment'], typing.List['AnnouncementAttachment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'attachments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AnnouncementAttachment':
                    return super().__getitem__(i)
            __annotations__ = {
                "summary": summary,
                "title": title,
                "body": body,
                "channel": channel,
                "start_date": start_date,
                "gift": gift,
                "mongo_start_date": mongo_start_date,
                "stat_requirements": stat_requirements,
                "mongo_end_date": mongo_end_date,
                "symbol": symbol,
                "clientData": clientData,
                "validationErrors": validationErrors,
                "end_date": end_date,
                "attachments": attachments,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel"]) -> MetaOapg.properties.channel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gift"]) -> 'PlayerReward': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mongo_start_date"]) -> MetaOapg.properties.mongo_start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stat_requirements"]) -> MetaOapg.properties.stat_requirements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mongo_end_date"]) -> MetaOapg.properties.mongo_end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientData"]) -> 'AnnouncementClientData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validationErrors"]) -> 'AnnouncementValidationErrors': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachments"]) -> MetaOapg.properties.attachments: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["summary", "title", "body", "channel", "start_date", "gift", "mongo_start_date", "stat_requirements", "mongo_end_date", "symbol", "clientData", "validationErrors", "end_date", "attachments", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> typing.Union[MetaOapg.properties.summary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body"]) -> typing.Union[MetaOapg.properties.body, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> typing.Union[MetaOapg.properties.channel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> typing.Union[MetaOapg.properties.start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gift"]) -> typing.Union['PlayerReward', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mongo_start_date"]) -> typing.Union[MetaOapg.properties.mongo_start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stat_requirements"]) -> typing.Union[MetaOapg.properties.stat_requirements, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mongo_end_date"]) -> typing.Union[MetaOapg.properties.mongo_end_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> typing.Union[MetaOapg.properties.symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientData"]) -> typing.Union['AnnouncementClientData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validationErrors"]) -> typing.Union['AnnouncementValidationErrors', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date"]) -> typing.Union[MetaOapg.properties.end_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachments"]) -> typing.Union[MetaOapg.properties.attachments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["summary", "title", "body", "channel", "start_date", "gift", "mongo_start_date", "stat_requirements", "mongo_end_date", "symbol", "clientData", "validationErrors", "end_date", "attachments", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        summary: typing.Union[MetaOapg.properties.summary, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        body: typing.Union[MetaOapg.properties.body, str, schemas.Unset] = schemas.unset,
        channel: typing.Union[MetaOapg.properties.channel, str, schemas.Unset] = schemas.unset,
        start_date: typing.Union[MetaOapg.properties.start_date, str, schemas.Unset] = schemas.unset,
        gift: typing.Union['PlayerReward', schemas.Unset] = schemas.unset,
        mongo_start_date: typing.Union[MetaOapg.properties.mongo_start_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        stat_requirements: typing.Union[MetaOapg.properties.stat_requirements, list, tuple, schemas.Unset] = schemas.unset,
        mongo_end_date: typing.Union[MetaOapg.properties.mongo_end_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        symbol: typing.Union[MetaOapg.properties.symbol, str, schemas.Unset] = schemas.unset,
        clientData: typing.Union['AnnouncementClientData', schemas.Unset] = schemas.unset,
        validationErrors: typing.Union['AnnouncementValidationErrors', schemas.Unset] = schemas.unset,
        end_date: typing.Union[MetaOapg.properties.end_date, str, schemas.Unset] = schemas.unset,
        attachments: typing.Union[MetaOapg.properties.attachments, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Announcement':
        return super().__new__(
            cls,
            *args,
            summary=summary,
            title=title,
            body=body,
            channel=channel,
            start_date=start_date,
            gift=gift,
            mongo_start_date=mongo_start_date,
            stat_requirements=stat_requirements,
            mongo_end_date=mongo_end_date,
            symbol=symbol,
            clientData=clientData,
            validationErrors=validationErrors,
            end_date=end_date,
            attachments=attachments,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.announcement_attachment import AnnouncementAttachment
from beamable_python_sdk.model.announcement_client_data import AnnouncementClientData
from beamable_python_sdk.model.announcement_validation_errors import AnnouncementValidationErrors
from beamable_python_sdk.model.player_reward import PlayerReward
from beamable_python_sdk.model.player_stat_requirement import PlayerStatRequirement
