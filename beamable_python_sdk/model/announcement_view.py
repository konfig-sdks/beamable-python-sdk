# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class AnnouncementView(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "isDeleted",
            "isRead",
            "isClaimed",
        }
        
        class properties:
            isClaimed = schemas.BoolSchema
            isDeleted = schemas.BoolSchema
            isRead = schemas.BoolSchema
            summary = schemas.StrSchema
            title = schemas.StrSchema
            body = schemas.StrSchema
            channel = schemas.StrSchema
            endDate = schemas.StrSchema
            
            
            class clientDataList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ClientDataEntry']:
                        return ClientDataEntry
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ClientDataEntry'], typing.List['ClientDataEntry']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'clientDataList':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ClientDataEntry':
                    return super().__getitem__(i)
            secondsRemaining = schemas.IntSchema
            id = schemas.StrSchema
            startDate = schemas.StrSchema
            
            
            class attachments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AnnouncementAttachment']:
                        return AnnouncementAttachment
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AnnouncementAttachment'], typing.List['AnnouncementAttachment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'attachments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AnnouncementAttachment':
                    return super().__getitem__(i)
            __annotations__ = {
                "isClaimed": isClaimed,
                "isDeleted": isDeleted,
                "isRead": isRead,
                "summary": summary,
                "title": title,
                "body": body,
                "channel": channel,
                "endDate": endDate,
                "clientDataList": clientDataList,
                "secondsRemaining": secondsRemaining,
                "id": id,
                "startDate": startDate,
                "attachments": attachments,
            }
    
    isDeleted: MetaOapg.properties.isDeleted
    isRead: MetaOapg.properties.isRead
    isClaimed: MetaOapg.properties.isClaimed
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isClaimed"]) -> MetaOapg.properties.isClaimed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDeleted"]) -> MetaOapg.properties.isDeleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isRead"]) -> MetaOapg.properties.isRead: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel"]) -> MetaOapg.properties.channel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientDataList"]) -> MetaOapg.properties.clientDataList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondsRemaining"]) -> MetaOapg.properties.secondsRemaining: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachments"]) -> MetaOapg.properties.attachments: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["isClaimed", "isDeleted", "isRead", "summary", "title", "body", "channel", "endDate", "clientDataList", "secondsRemaining", "id", "startDate", "attachments", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isClaimed"]) -> MetaOapg.properties.isClaimed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDeleted"]) -> MetaOapg.properties.isDeleted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isRead"]) -> MetaOapg.properties.isRead: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> typing.Union[MetaOapg.properties.summary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body"]) -> typing.Union[MetaOapg.properties.body, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> typing.Union[MetaOapg.properties.channel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientDataList"]) -> typing.Union[MetaOapg.properties.clientDataList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondsRemaining"]) -> typing.Union[MetaOapg.properties.secondsRemaining, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachments"]) -> typing.Union[MetaOapg.properties.attachments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["isClaimed", "isDeleted", "isRead", "summary", "title", "body", "channel", "endDate", "clientDataList", "secondsRemaining", "id", "startDate", "attachments", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        isDeleted: typing.Union[MetaOapg.properties.isDeleted, bool, ],
        isRead: typing.Union[MetaOapg.properties.isRead, bool, ],
        isClaimed: typing.Union[MetaOapg.properties.isClaimed, bool, ],
        summary: typing.Union[MetaOapg.properties.summary, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        body: typing.Union[MetaOapg.properties.body, str, schemas.Unset] = schemas.unset,
        channel: typing.Union[MetaOapg.properties.channel, str, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, schemas.Unset] = schemas.unset,
        clientDataList: typing.Union[MetaOapg.properties.clientDataList, list, tuple, schemas.Unset] = schemas.unset,
        secondsRemaining: typing.Union[MetaOapg.properties.secondsRemaining, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, schemas.Unset] = schemas.unset,
        attachments: typing.Union[MetaOapg.properties.attachments, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AnnouncementView':
        return super().__new__(
            cls,
            *args,
            isDeleted=isDeleted,
            isRead=isRead,
            isClaimed=isClaimed,
            summary=summary,
            title=title,
            body=body,
            channel=channel,
            endDate=endDate,
            clientDataList=clientDataList,
            secondsRemaining=secondsRemaining,
            id=id,
            startDate=startDate,
            attachments=attachments,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.announcement_attachment import AnnouncementAttachment
from beamable_python_sdk.model.client_data_entry import ClientDataEntry
