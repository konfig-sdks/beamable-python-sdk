# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class CalendarView(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "remainingSeconds",
            "nextIndex",
            "nextClaimSeconds",
        }
        
        class properties:
            nextIndex = schemas.IntSchema
            nextClaimSeconds = schemas.IntSchema
            remainingSeconds = schemas.IntSchema
            id = schemas.StrSchema
            
            
            class days(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RewardCalendarDay']:
                        return RewardCalendarDay
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['RewardCalendarDay'], typing.List['RewardCalendarDay']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'days':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RewardCalendarDay':
                    return super().__getitem__(i)
            __annotations__ = {
                "nextIndex": nextIndex,
                "nextClaimSeconds": nextClaimSeconds,
                "remainingSeconds": remainingSeconds,
                "id": id,
                "days": days,
            }
    
    remainingSeconds: MetaOapg.properties.remainingSeconds
    nextIndex: MetaOapg.properties.nextIndex
    nextClaimSeconds: MetaOapg.properties.nextClaimSeconds
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextIndex"]) -> MetaOapg.properties.nextIndex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextClaimSeconds"]) -> MetaOapg.properties.nextClaimSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remainingSeconds"]) -> MetaOapg.properties.remainingSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days"]) -> MetaOapg.properties.days: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["nextIndex", "nextClaimSeconds", "remainingSeconds", "id", "days", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextIndex"]) -> MetaOapg.properties.nextIndex: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextClaimSeconds"]) -> MetaOapg.properties.nextClaimSeconds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remainingSeconds"]) -> MetaOapg.properties.remainingSeconds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days"]) -> typing.Union[MetaOapg.properties.days, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["nextIndex", "nextClaimSeconds", "remainingSeconds", "id", "days", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        remainingSeconds: typing.Union[MetaOapg.properties.remainingSeconds, decimal.Decimal, int, ],
        nextIndex: typing.Union[MetaOapg.properties.nextIndex, decimal.Decimal, int, ],
        nextClaimSeconds: typing.Union[MetaOapg.properties.nextClaimSeconds, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        days: typing.Union[MetaOapg.properties.days, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CalendarView':
        return super().__new__(
            cls,
            *args,
            remainingSeconds=remainingSeconds,
            nextIndex=nextIndex,
            nextClaimSeconds=nextClaimSeconds,
            id=id,
            days=days,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.reward_calendar_day import RewardCalendarDay
