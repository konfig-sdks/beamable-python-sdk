# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class CloudStorage(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "stype",
            "sid",
        }
        
        class properties:
            stype = schemas.IntSchema
            sid = schemas.IntSchema
            version = schemas.IntSchema
            retrieved = schemas.IntSchema
            uniqueIdentifier = schemas.StrSchema
            data = schemas.AnyTypeSchema
            ref = schemas.StrSchema
            added = schemas.IntSchema
            updated = schemas.IntSchema
            expiration = schemas.IntSchema
            gt = schemas.IntSchema
            __annotations__ = {
                "stype": stype,
                "sid": sid,
                "version": version,
                "retrieved": retrieved,
                "uniqueIdentifier": uniqueIdentifier,
                "data": data,
                "ref": ref,
                "added": added,
                "updated": updated,
                "expiration": expiration,
                "gt": gt,
            }
    
    stype: MetaOapg.properties.stype
    sid: MetaOapg.properties.sid
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stype"]) -> MetaOapg.properties.stype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sid"]) -> MetaOapg.properties.sid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["retrieved"]) -> MetaOapg.properties.retrieved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uniqueIdentifier"]) -> MetaOapg.properties.uniqueIdentifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ref"]) -> MetaOapg.properties.ref: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["added"]) -> MetaOapg.properties.added: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiration"]) -> MetaOapg.properties.expiration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gt"]) -> MetaOapg.properties.gt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["stype", "sid", "version", "retrieved", "uniqueIdentifier", "data", "ref", "added", "updated", "expiration", "gt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stype"]) -> MetaOapg.properties.stype: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sid"]) -> MetaOapg.properties.sid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["retrieved"]) -> typing.Union[MetaOapg.properties.retrieved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uniqueIdentifier"]) -> typing.Union[MetaOapg.properties.uniqueIdentifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ref"]) -> typing.Union[MetaOapg.properties.ref, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["added"]) -> typing.Union[MetaOapg.properties.added, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> typing.Union[MetaOapg.properties.updated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiration"]) -> typing.Union[MetaOapg.properties.expiration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gt"]) -> typing.Union[MetaOapg.properties.gt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["stype", "sid", "version", "retrieved", "uniqueIdentifier", "data", "ref", "added", "updated", "expiration", "gt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        stype: typing.Union[MetaOapg.properties.stype, decimal.Decimal, int, ],
        sid: typing.Union[MetaOapg.properties.sid, decimal.Decimal, int, ],
        version: typing.Union[MetaOapg.properties.version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        retrieved: typing.Union[MetaOapg.properties.retrieved, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        uniqueIdentifier: typing.Union[MetaOapg.properties.uniqueIdentifier, str, schemas.Unset] = schemas.unset,
        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        ref: typing.Union[MetaOapg.properties.ref, str, schemas.Unset] = schemas.unset,
        added: typing.Union[MetaOapg.properties.added, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        updated: typing.Union[MetaOapg.properties.updated, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        expiration: typing.Union[MetaOapg.properties.expiration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        gt: typing.Union[MetaOapg.properties.gt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CloudStorage':
        return super().__new__(
            cls,
            *args,
            stype=stype,
            sid=sid,
            version=version,
            retrieved=retrieved,
            uniqueIdentifier=uniqueIdentifier,
            data=data,
            ref=ref,
            added=added,
            updated=updated,
            expiration=expiration,
            gt=gt,
            _configuration=_configuration,
            **kwargs,
        )
