# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class ContentDefinition(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def tags() -> typing.Type['ContentDefinitionTags']:
                return ContentDefinitionTags
            prefix = schemas.StrSchema
            id = schemas.StrSchema
            checksum = schemas.StrSchema
        
            @staticmethod
            def properties() -> typing.Type['ContentDefinitionProperties']:
                return ContentDefinitionProperties
        
            @staticmethod
            def variants() -> typing.Type['ContentDefinitionVariants']:
                return ContentDefinitionVariants
            __annotations__ = {
                "tags": tags,
                "prefix": prefix,
                "id": id,
                "checksum": checksum,
                "properties": properties,
                "variants": variants,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'ContentDefinitionTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefix"]) -> MetaOapg.properties.prefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checksum"]) -> MetaOapg.properties.checksum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["properties"]) -> 'ContentDefinitionProperties': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variants"]) -> 'ContentDefinitionVariants': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "prefix", "id", "checksum", "properties", "variants", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union['ContentDefinitionTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefix"]) -> typing.Union[MetaOapg.properties.prefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checksum"]) -> typing.Union[MetaOapg.properties.checksum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["properties"]) -> typing.Union['ContentDefinitionProperties', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variants"]) -> typing.Union['ContentDefinitionVariants', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "prefix", "id", "checksum", "properties", "variants", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tags: typing.Union['ContentDefinitionTags', schemas.Unset] = schemas.unset,
        prefix: typing.Union[MetaOapg.properties.prefix, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        checksum: typing.Union[MetaOapg.properties.checksum, str, schemas.Unset] = schemas.unset,
        properties: typing.Union['ContentDefinitionProperties', schemas.Unset] = schemas.unset,
        variants: typing.Union['ContentDefinitionVariants', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ContentDefinition':
        return super().__new__(
            cls,
            *args,
            tags=tags,
            prefix=prefix,
            id=id,
            checksum=checksum,
            properties=properties,
            variants=variants,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.content_definition_properties import ContentDefinitionProperties
from beamable_python_sdk.model.content_definition_tags import ContentDefinitionTags
from beamable_python_sdk.model.content_definition_variants import ContentDefinitionVariants
