# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class CreateMessageCampaignRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "resend_to_past_recipients",
            "sent",
        }
        
        class properties:
            resend_to_past_recipients = schemas.BoolSchema
            sent = schemas.IntSchema
            mtype = schemas.StrSchema
            mb_store = schemas.StrSchema
            mb_expiration = schemas.StrSchema
            name = schemas.StrSchema
            subject = schemas.StrSchema
            mb_ent_spec = schemas.StrSchema
            mb_ent_quant = schemas.IntSchema
            datepoint = schemas.StrSchema
            
            
            class mb_attachments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AttachmentRequest']:
                        return AttachmentRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AttachmentRequest'], typing.List['AttachmentRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mb_attachments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AttachmentRequest':
                    return super().__getitem__(i)
            recur = schemas.StrSchema
            msg = schemas.StrSchema
        
            @staticmethod
            def rules() -> typing.Type['CreateMessageCampaignRequestRules']:
                return CreateMessageCampaignRequestRules
            mb_ent = schemas.StrSchema
            start = schemas.StrSchema
            days = schemas.StrSchema
            __annotations__ = {
                "resend_to_past_recipients": resend_to_past_recipients,
                "sent": sent,
                "mtype": mtype,
                "mb_store": mb_store,
                "mb_expiration": mb_expiration,
                "name": name,
                "subject": subject,
                "mb_ent_spec": mb_ent_spec,
                "mb_ent_quant": mb_ent_quant,
                "datepoint": datepoint,
                "mb_attachments": mb_attachments,
                "recur": recur,
                "msg": msg,
                "rules": rules,
                "mb_ent": mb_ent,
                "start": start,
                "days": days,
            }
    
    resend_to_past_recipients: MetaOapg.properties.resend_to_past_recipients
    sent: MetaOapg.properties.sent
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resend_to_past_recipients"]) -> MetaOapg.properties.resend_to_past_recipients: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sent"]) -> MetaOapg.properties.sent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtype"]) -> MetaOapg.properties.mtype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mb_store"]) -> MetaOapg.properties.mb_store: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mb_expiration"]) -> MetaOapg.properties.mb_expiration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject"]) -> MetaOapg.properties.subject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mb_ent_spec"]) -> MetaOapg.properties.mb_ent_spec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mb_ent_quant"]) -> MetaOapg.properties.mb_ent_quant: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datepoint"]) -> MetaOapg.properties.datepoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mb_attachments"]) -> MetaOapg.properties.mb_attachments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recur"]) -> MetaOapg.properties.recur: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["msg"]) -> MetaOapg.properties.msg: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rules"]) -> 'CreateMessageCampaignRequestRules': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mb_ent"]) -> MetaOapg.properties.mb_ent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days"]) -> MetaOapg.properties.days: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["resend_to_past_recipients", "sent", "mtype", "mb_store", "mb_expiration", "name", "subject", "mb_ent_spec", "mb_ent_quant", "datepoint", "mb_attachments", "recur", "msg", "rules", "mb_ent", "start", "days", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resend_to_past_recipients"]) -> MetaOapg.properties.resend_to_past_recipients: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sent"]) -> MetaOapg.properties.sent: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtype"]) -> typing.Union[MetaOapg.properties.mtype, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mb_store"]) -> typing.Union[MetaOapg.properties.mb_store, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mb_expiration"]) -> typing.Union[MetaOapg.properties.mb_expiration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject"]) -> typing.Union[MetaOapg.properties.subject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mb_ent_spec"]) -> typing.Union[MetaOapg.properties.mb_ent_spec, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mb_ent_quant"]) -> typing.Union[MetaOapg.properties.mb_ent_quant, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datepoint"]) -> typing.Union[MetaOapg.properties.datepoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mb_attachments"]) -> typing.Union[MetaOapg.properties.mb_attachments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recur"]) -> typing.Union[MetaOapg.properties.recur, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["msg"]) -> typing.Union[MetaOapg.properties.msg, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rules"]) -> typing.Union['CreateMessageCampaignRequestRules', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mb_ent"]) -> typing.Union[MetaOapg.properties.mb_ent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> typing.Union[MetaOapg.properties.start, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days"]) -> typing.Union[MetaOapg.properties.days, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["resend_to_past_recipients", "sent", "mtype", "mb_store", "mb_expiration", "name", "subject", "mb_ent_spec", "mb_ent_quant", "datepoint", "mb_attachments", "recur", "msg", "rules", "mb_ent", "start", "days", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        resend_to_past_recipients: typing.Union[MetaOapg.properties.resend_to_past_recipients, bool, ],
        sent: typing.Union[MetaOapg.properties.sent, decimal.Decimal, int, ],
        mtype: typing.Union[MetaOapg.properties.mtype, str, schemas.Unset] = schemas.unset,
        mb_store: typing.Union[MetaOapg.properties.mb_store, str, schemas.Unset] = schemas.unset,
        mb_expiration: typing.Union[MetaOapg.properties.mb_expiration, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        subject: typing.Union[MetaOapg.properties.subject, str, schemas.Unset] = schemas.unset,
        mb_ent_spec: typing.Union[MetaOapg.properties.mb_ent_spec, str, schemas.Unset] = schemas.unset,
        mb_ent_quant: typing.Union[MetaOapg.properties.mb_ent_quant, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        datepoint: typing.Union[MetaOapg.properties.datepoint, str, schemas.Unset] = schemas.unset,
        mb_attachments: typing.Union[MetaOapg.properties.mb_attachments, list, tuple, schemas.Unset] = schemas.unset,
        recur: typing.Union[MetaOapg.properties.recur, str, schemas.Unset] = schemas.unset,
        msg: typing.Union[MetaOapg.properties.msg, str, schemas.Unset] = schemas.unset,
        rules: typing.Union['CreateMessageCampaignRequestRules', schemas.Unset] = schemas.unset,
        mb_ent: typing.Union[MetaOapg.properties.mb_ent, str, schemas.Unset] = schemas.unset,
        start: typing.Union[MetaOapg.properties.start, str, schemas.Unset] = schemas.unset,
        days: typing.Union[MetaOapg.properties.days, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateMessageCampaignRequest':
        return super().__new__(
            cls,
            *args,
            resend_to_past_recipients=resend_to_past_recipients,
            sent=sent,
            mtype=mtype,
            mb_store=mb_store,
            mb_expiration=mb_expiration,
            name=name,
            subject=subject,
            mb_ent_spec=mb_ent_spec,
            mb_ent_quant=mb_ent_quant,
            datepoint=datepoint,
            mb_attachments=mb_attachments,
            recur=recur,
            msg=msg,
            rules=rules,
            mb_ent=mb_ent,
            start=start,
            days=days,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.attachment_request import AttachmentRequest
from beamable_python_sdk.model.create_message_campaign_request_rules import CreateMessageCampaignRequestRules
