# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class CreatePlanRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "mongoSSL",
            "name",
            "memcachedHosts",
            "platformJBDC",
            "sharded",
            "mongoHosts",
            "redisShards",
        }
        
        class properties:
            name = schemas.StrSchema
            memcachedHosts = schemas.StrSchema
            mongoSSL = schemas.BoolSchema
            platformJBDC = schemas.StrSchema
            sharded = schemas.BoolSchema
            mongoHosts = schemas.StrSchema
            
            
            class redisShards(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RedisShardRequest']:
                        return RedisShardRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['RedisShardRequest'], typing.List['RedisShardRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'redisShards':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RedisShardRequest':
                    return super().__getitem__(i)
        
            @staticmethod
            def messageBusAnalytics() -> typing.Type['CreatePlanRequestMessageBusAnalytics']:
                return CreatePlanRequestMessageBusAnalytics
        
            @staticmethod
            def messageBusCommon() -> typing.Type['CreatePlanRequestMessageBusCommon']:
                return CreatePlanRequestMessageBusCommon
            __annotations__ = {
                "name": name,
                "memcachedHosts": memcachedHosts,
                "mongoSSL": mongoSSL,
                "platformJBDC": platformJBDC,
                "sharded": sharded,
                "mongoHosts": mongoHosts,
                "redisShards": redisShards,
                "messageBusAnalytics": messageBusAnalytics,
                "messageBusCommon": messageBusCommon,
            }
    
    mongoSSL: MetaOapg.properties.mongoSSL
    name: MetaOapg.properties.name
    memcachedHosts: MetaOapg.properties.memcachedHosts
    platformJBDC: MetaOapg.properties.platformJBDC
    sharded: MetaOapg.properties.sharded
    mongoHosts: MetaOapg.properties.mongoHosts
    redisShards: MetaOapg.properties.redisShards
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memcachedHosts"]) -> MetaOapg.properties.memcachedHosts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mongoSSL"]) -> MetaOapg.properties.mongoSSL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platformJBDC"]) -> MetaOapg.properties.platformJBDC: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sharded"]) -> MetaOapg.properties.sharded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mongoHosts"]) -> MetaOapg.properties.mongoHosts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["redisShards"]) -> MetaOapg.properties.redisShards: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["messageBusAnalytics"]) -> 'CreatePlanRequestMessageBusAnalytics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["messageBusCommon"]) -> 'CreatePlanRequestMessageBusCommon': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "memcachedHosts", "mongoSSL", "platformJBDC", "sharded", "mongoHosts", "redisShards", "messageBusAnalytics", "messageBusCommon", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memcachedHosts"]) -> MetaOapg.properties.memcachedHosts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mongoSSL"]) -> MetaOapg.properties.mongoSSL: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platformJBDC"]) -> MetaOapg.properties.platformJBDC: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sharded"]) -> MetaOapg.properties.sharded: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mongoHosts"]) -> MetaOapg.properties.mongoHosts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["redisShards"]) -> MetaOapg.properties.redisShards: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["messageBusAnalytics"]) -> typing.Union['CreatePlanRequestMessageBusAnalytics', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["messageBusCommon"]) -> typing.Union['CreatePlanRequestMessageBusCommon', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "memcachedHosts", "mongoSSL", "platformJBDC", "sharded", "mongoHosts", "redisShards", "messageBusAnalytics", "messageBusCommon", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        mongoSSL: typing.Union[MetaOapg.properties.mongoSSL, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        memcachedHosts: typing.Union[MetaOapg.properties.memcachedHosts, str, ],
        platformJBDC: typing.Union[MetaOapg.properties.platformJBDC, str, ],
        sharded: typing.Union[MetaOapg.properties.sharded, bool, ],
        mongoHosts: typing.Union[MetaOapg.properties.mongoHosts, str, ],
        redisShards: typing.Union[MetaOapg.properties.redisShards, list, tuple, ],
        messageBusAnalytics: typing.Union['CreatePlanRequestMessageBusAnalytics', schemas.Unset] = schemas.unset,
        messageBusCommon: typing.Union['CreatePlanRequestMessageBusCommon', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreatePlanRequest':
        return super().__new__(
            cls,
            *args,
            mongoSSL=mongoSSL,
            name=name,
            memcachedHosts=memcachedHosts,
            platformJBDC=platformJBDC,
            sharded=sharded,
            mongoHosts=mongoHosts,
            redisShards=redisShards,
            messageBusAnalytics=messageBusAnalytics,
            messageBusCommon=messageBusCommon,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.create_plan_request_message_bus_analytics import CreatePlanRequestMessageBusAnalytics
from beamable_python_sdk.model.create_plan_request_message_bus_common import CreatePlanRequestMessageBusCommon
from beamable_python_sdk.model.redis_shard_request import RedisShardRequest
