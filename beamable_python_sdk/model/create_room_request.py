# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class CreateRoomRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "keepSubscribed",
        }
        
        class properties:
            keepSubscribed = schemas.BoolSchema
            roomName = schemas.StrSchema
        
            @staticmethod
            def players() -> typing.Type['CreateRoomRequestPlayers']:
                return CreateRoomRequestPlayers
            gameType = schemas.StrSchema
        
            @staticmethod
            def dbids() -> typing.Type['CreateRoomRequestDbids']:
                return CreateRoomRequestDbids
            __annotations__ = {
                "keepSubscribed": keepSubscribed,
                "roomName": roomName,
                "players": players,
                "gameType": gameType,
                "dbids": dbids,
            }
    
    keepSubscribed: MetaOapg.properties.keepSubscribed
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keepSubscribed"]) -> MetaOapg.properties.keepSubscribed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roomName"]) -> MetaOapg.properties.roomName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["players"]) -> 'CreateRoomRequestPlayers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gameType"]) -> MetaOapg.properties.gameType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dbids"]) -> 'CreateRoomRequestDbids': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["keepSubscribed", "roomName", "players", "gameType", "dbids", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keepSubscribed"]) -> MetaOapg.properties.keepSubscribed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roomName"]) -> typing.Union[MetaOapg.properties.roomName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["players"]) -> typing.Union['CreateRoomRequestPlayers', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gameType"]) -> typing.Union[MetaOapg.properties.gameType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dbids"]) -> typing.Union['CreateRoomRequestDbids', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["keepSubscribed", "roomName", "players", "gameType", "dbids", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        keepSubscribed: typing.Union[MetaOapg.properties.keepSubscribed, bool, ],
        roomName: typing.Union[MetaOapg.properties.roomName, str, schemas.Unset] = schemas.unset,
        players: typing.Union['CreateRoomRequestPlayers', schemas.Unset] = schemas.unset,
        gameType: typing.Union[MetaOapg.properties.gameType, str, schemas.Unset] = schemas.unset,
        dbids: typing.Union['CreateRoomRequestDbids', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateRoomRequest':
        return super().__new__(
            cls,
            *args,
            keepSubscribed=keepSubscribed,
            roomName=roomName,
            players=players,
            gameType=gameType,
            dbids=dbids,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.create_room_request_dbids import CreateRoomRequestDbids
from beamable_python_sdk.model.create_room_request_players import CreateRoomRequestPlayers
