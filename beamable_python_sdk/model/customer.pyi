# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class Customer(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "projects",
            "name",
            "accounts",
            "cid",
        }
        
        class properties:
            name = schemas.StrSchema
            cid = schemas.Int64Schema
            
            
            class projects(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Project']:
                        return Project
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Project'], typing.List['Project']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'projects':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Project':
                    return super().__getitem__(i)
            
            
            class accounts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Account']:
                        return Account
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Account'], typing.List['Account']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'accounts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Account':
                    return super().__getitem__(i)
            paymentStatus = schemas.StrSchema
            image = schemas.StrSchema
            contact = schemas.StrSchema
            alias = schemas.StrSchema
            updated = schemas.Int64Schema
            crm_link = schemas.StrSchema
            created = schemas.Int64Schema
            __annotations__ = {
                "name": name,
                "cid": cid,
                "projects": projects,
                "accounts": accounts,
                "paymentStatus": paymentStatus,
                "image": image,
                "contact": contact,
                "alias": alias,
                "updated": updated,
                "crm_link": crm_link,
                "created": created,
            }
    
    projects: MetaOapg.properties.projects
    name: MetaOapg.properties.name
    accounts: MetaOapg.properties.accounts
    cid: MetaOapg.properties.cid
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projects"]) -> MetaOapg.properties.projects: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accounts"]) -> MetaOapg.properties.accounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentStatus"]) -> MetaOapg.properties.paymentStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image"]) -> MetaOapg.properties.image: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contact"]) -> MetaOapg.properties.contact: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alias"]) -> MetaOapg.properties.alias: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crm_link"]) -> MetaOapg.properties.crm_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "cid", "projects", "accounts", "paymentStatus", "image", "contact", "alias", "updated", "crm_link", "created", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projects"]) -> MetaOapg.properties.projects: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accounts"]) -> MetaOapg.properties.accounts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentStatus"]) -> typing.Union[MetaOapg.properties.paymentStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image"]) -> typing.Union[MetaOapg.properties.image, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contact"]) -> typing.Union[MetaOapg.properties.contact, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alias"]) -> typing.Union[MetaOapg.properties.alias, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> typing.Union[MetaOapg.properties.updated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crm_link"]) -> typing.Union[MetaOapg.properties.crm_link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "cid", "projects", "accounts", "paymentStatus", "image", "contact", "alias", "updated", "crm_link", "created", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        projects: typing.Union[MetaOapg.properties.projects, list, tuple, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        accounts: typing.Union[MetaOapg.properties.accounts, list, tuple, ],
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, ],
        paymentStatus: typing.Union[MetaOapg.properties.paymentStatus, str, schemas.Unset] = schemas.unset,
        image: typing.Union[MetaOapg.properties.image, str, schemas.Unset] = schemas.unset,
        contact: typing.Union[MetaOapg.properties.contact, str, schemas.Unset] = schemas.unset,
        alias: typing.Union[MetaOapg.properties.alias, str, schemas.Unset] = schemas.unset,
        updated: typing.Union[MetaOapg.properties.updated, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        crm_link: typing.Union[MetaOapg.properties.crm_link, str, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Customer':
        return super().__new__(
            cls,
            *args,
            projects=projects,
            name=name,
            accounts=accounts,
            cid=cid,
            paymentStatus=paymentStatus,
            image=image,
            contact=contact,
            alias=alias,
            updated=updated,
            crm_link=crm_link,
            created=created,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.account import Account
from beamable_python_sdk.model.project import Project
