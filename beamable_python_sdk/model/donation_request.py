# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class DonationRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "timeRequested",
            "satisfied",
            "playerId",
        }
        
        class properties:
            timeRequested = schemas.IntSchema
            satisfied = schemas.BoolSchema
            playerId = schemas.IntSchema
            
            
            class progress(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DonationEntry']:
                        return DonationEntry
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DonationEntry'], typing.List['DonationEntry']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'progress':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DonationEntry':
                    return super().__getitem__(i)
        
            @staticmethod
            def currency() -> typing.Type['Currency']:
                return Currency
            __annotations__ = {
                "timeRequested": timeRequested,
                "satisfied": satisfied,
                "playerId": playerId,
                "progress": progress,
                "currency": currency,
            }
    
    timeRequested: MetaOapg.properties.timeRequested
    satisfied: MetaOapg.properties.satisfied
    playerId: MetaOapg.properties.playerId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeRequested"]) -> MetaOapg.properties.timeRequested: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["satisfied"]) -> MetaOapg.properties.satisfied: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playerId"]) -> MetaOapg.properties.playerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["progress"]) -> MetaOapg.properties.progress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["timeRequested", "satisfied", "playerId", "progress", "currency", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeRequested"]) -> MetaOapg.properties.timeRequested: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["satisfied"]) -> MetaOapg.properties.satisfied: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playerId"]) -> MetaOapg.properties.playerId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["progress"]) -> typing.Union[MetaOapg.properties.progress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union['Currency', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["timeRequested", "satisfied", "playerId", "progress", "currency", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        timeRequested: typing.Union[MetaOapg.properties.timeRequested, decimal.Decimal, int, ],
        satisfied: typing.Union[MetaOapg.properties.satisfied, bool, ],
        playerId: typing.Union[MetaOapg.properties.playerId, decimal.Decimal, int, ],
        progress: typing.Union[MetaOapg.properties.progress, list, tuple, schemas.Unset] = schemas.unset,
        currency: typing.Union['Currency', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DonationRequest':
        return super().__new__(
            cls,
            *args,
            timeRequested=timeRequested,
            satisfied=satisfied,
            playerId=playerId,
            progress=progress,
            currency=currency,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.currency import Currency
from beamable_python_sdk.model.donation_entry import DonationEntry
