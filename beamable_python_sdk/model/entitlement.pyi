# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class Entitlement(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "gamerTag",
            "updated",
        }
        
        class properties:
            gamerTag = schemas.IntSchema
            updated = schemas.IntSchema
            cwinSecsTillOpen = schemas.IntSchema
        
            @staticmethod
            def history() -> typing.Type['EntitlementHistory']:
                return EntitlementHistory
            state = schemas.StrSchema
            uuid = schemas.StrSchema
        
            @staticmethod
            def cwin() -> typing.Type['EntitlementClaimWindow']:
                return EntitlementClaimWindow
            symbol = schemas.StrSchema
            specialized = schemas.StrSchema
            cwinSecsTillClose = schemas.IntSchema
            ttl = schemas.IntSchema
            __annotations__ = {
                "gamerTag": gamerTag,
                "updated": updated,
                "cwinSecsTillOpen": cwinSecsTillOpen,
                "history": history,
                "state": state,
                "uuid": uuid,
                "cwin": cwin,
                "symbol": symbol,
                "specialized": specialized,
                "cwinSecsTillClose": cwinSecsTillClose,
                "ttl": ttl,
            }
    
    gamerTag: MetaOapg.properties.gamerTag
    updated: MetaOapg.properties.updated
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gamerTag"]) -> MetaOapg.properties.gamerTag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cwinSecsTillOpen"]) -> MetaOapg.properties.cwinSecsTillOpen: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["history"]) -> 'EntitlementHistory': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cwin"]) -> 'EntitlementClaimWindow': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["specialized"]) -> MetaOapg.properties.specialized: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cwinSecsTillClose"]) -> MetaOapg.properties.cwinSecsTillClose: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ttl"]) -> MetaOapg.properties.ttl: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["gamerTag", "updated", "cwinSecsTillOpen", "history", "state", "uuid", "cwin", "symbol", "specialized", "cwinSecsTillClose", "ttl", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gamerTag"]) -> MetaOapg.properties.gamerTag: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cwinSecsTillOpen"]) -> typing.Union[MetaOapg.properties.cwinSecsTillOpen, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["history"]) -> typing.Union['EntitlementHistory', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cwin"]) -> typing.Union['EntitlementClaimWindow', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> typing.Union[MetaOapg.properties.symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["specialized"]) -> typing.Union[MetaOapg.properties.specialized, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cwinSecsTillClose"]) -> typing.Union[MetaOapg.properties.cwinSecsTillClose, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ttl"]) -> typing.Union[MetaOapg.properties.ttl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["gamerTag", "updated", "cwinSecsTillOpen", "history", "state", "uuid", "cwin", "symbol", "specialized", "cwinSecsTillClose", "ttl", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        gamerTag: typing.Union[MetaOapg.properties.gamerTag, decimal.Decimal, int, ],
        updated: typing.Union[MetaOapg.properties.updated, decimal.Decimal, int, ],
        cwinSecsTillOpen: typing.Union[MetaOapg.properties.cwinSecsTillOpen, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        history: typing.Union['EntitlementHistory', schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        cwin: typing.Union['EntitlementClaimWindow', schemas.Unset] = schemas.unset,
        symbol: typing.Union[MetaOapg.properties.symbol, str, schemas.Unset] = schemas.unset,
        specialized: typing.Union[MetaOapg.properties.specialized, str, schemas.Unset] = schemas.unset,
        cwinSecsTillClose: typing.Union[MetaOapg.properties.cwinSecsTillClose, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ttl: typing.Union[MetaOapg.properties.ttl, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Entitlement':
        return super().__new__(
            cls,
            *args,
            gamerTag=gamerTag,
            updated=updated,
            cwinSecsTillOpen=cwinSecsTillOpen,
            history=history,
            state=state,
            uuid=uuid,
            cwin=cwin,
            symbol=symbol,
            specialized=specialized,
            cwinSecsTillClose=cwinSecsTillClose,
            ttl=ttl,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.entitlement_claim_window import EntitlementClaimWindow
from beamable_python_sdk.model.entitlement_history import EntitlementHistory
