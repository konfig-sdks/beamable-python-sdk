# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class EntitlementDefRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            maxGrants = schemas.IntSchema
        
            @staticmethod
            def groupSymbols() -> typing.Type['EntitlementDefRequestGroupSymbols']:
                return EntitlementDefRequestGroupSymbols
            transferable = schemas.BoolSchema
            name = schemas.StrSchema
        
            @staticmethod
            def claimTrigger() -> typing.Type['StateChangeTriggerDef']:
                return StateChangeTriggerDef
            image = schemas.StrSchema
        
            @staticmethod
            def grantTrigger() -> typing.Type['StateChangeTriggerDef']:
                return StateChangeTriggerDef
            terminalExpirationSecs = schemas.IntSchema
            revokeMode = schemas.IntSchema
            replaces = schemas.StrSchema
            parameterized = schemas.BoolSchema
            __annotations__ = {
                "description": description,
                "maxGrants": maxGrants,
                "groupSymbols": groupSymbols,
                "transferable": transferable,
                "name": name,
                "claimTrigger": claimTrigger,
                "image": image,
                "grantTrigger": grantTrigger,
                "terminalExpirationSecs": terminalExpirationSecs,
                "revokeMode": revokeMode,
                "replaces": replaces,
                "parameterized": parameterized,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxGrants"]) -> MetaOapg.properties.maxGrants: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupSymbols"]) -> 'EntitlementDefRequestGroupSymbols': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transferable"]) -> MetaOapg.properties.transferable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["claimTrigger"]) -> 'StateChangeTriggerDef': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image"]) -> MetaOapg.properties.image: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grantTrigger"]) -> 'StateChangeTriggerDef': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terminalExpirationSecs"]) -> MetaOapg.properties.terminalExpirationSecs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["revokeMode"]) -> MetaOapg.properties.revokeMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replaces"]) -> MetaOapg.properties.replaces: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parameterized"]) -> MetaOapg.properties.parameterized: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "maxGrants", "groupSymbols", "transferable", "name", "claimTrigger", "image", "grantTrigger", "terminalExpirationSecs", "revokeMode", "replaces", "parameterized", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxGrants"]) -> typing.Union[MetaOapg.properties.maxGrants, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupSymbols"]) -> typing.Union['EntitlementDefRequestGroupSymbols', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transferable"]) -> typing.Union[MetaOapg.properties.transferable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["claimTrigger"]) -> typing.Union['StateChangeTriggerDef', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image"]) -> typing.Union[MetaOapg.properties.image, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grantTrigger"]) -> typing.Union['StateChangeTriggerDef', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terminalExpirationSecs"]) -> typing.Union[MetaOapg.properties.terminalExpirationSecs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["revokeMode"]) -> typing.Union[MetaOapg.properties.revokeMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replaces"]) -> typing.Union[MetaOapg.properties.replaces, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parameterized"]) -> typing.Union[MetaOapg.properties.parameterized, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "maxGrants", "groupSymbols", "transferable", "name", "claimTrigger", "image", "grantTrigger", "terminalExpirationSecs", "revokeMode", "replaces", "parameterized", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        maxGrants: typing.Union[MetaOapg.properties.maxGrants, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        groupSymbols: typing.Union['EntitlementDefRequestGroupSymbols', schemas.Unset] = schemas.unset,
        transferable: typing.Union[MetaOapg.properties.transferable, bool, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        claimTrigger: typing.Union['StateChangeTriggerDef', schemas.Unset] = schemas.unset,
        image: typing.Union[MetaOapg.properties.image, str, schemas.Unset] = schemas.unset,
        grantTrigger: typing.Union['StateChangeTriggerDef', schemas.Unset] = schemas.unset,
        terminalExpirationSecs: typing.Union[MetaOapg.properties.terminalExpirationSecs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        revokeMode: typing.Union[MetaOapg.properties.revokeMode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        replaces: typing.Union[MetaOapg.properties.replaces, str, schemas.Unset] = schemas.unset,
        parameterized: typing.Union[MetaOapg.properties.parameterized, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EntitlementDefRequest':
        return super().__new__(
            cls,
            *args,
            description=description,
            maxGrants=maxGrants,
            groupSymbols=groupSymbols,
            transferable=transferable,
            name=name,
            claimTrigger=claimTrigger,
            image=image,
            grantTrigger=grantTrigger,
            terminalExpirationSecs=terminalExpirationSecs,
            revokeMode=revokeMode,
            replaces=replaces,
            parameterized=parameterized,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.entitlement_def_request_group_symbols import EntitlementDefRequestGroupSymbols
from beamable_python_sdk.model.state_change_trigger_def import StateChangeTriggerDef
