# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class EntitlementGenerator(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "symbol",
            "action",
        }
        
        class properties:
            symbol = schemas.StrSchema
            action = schemas.StrSchema
            quantity = schemas.Int32Schema
        
            @staticmethod
            def claimWindow() -> typing.Type['EntitlementClaimWindow']:
                return EntitlementClaimWindow
        
            @staticmethod
            def params() -> typing.Type['EntitlementGeneratorParams']:
                return EntitlementGeneratorParams
            specialization = schemas.StrSchema
            __annotations__ = {
                "symbol": symbol,
                "action": action,
                "quantity": quantity,
                "claimWindow": claimWindow,
                "params": params,
                "specialization": specialization,
            }
    
    symbol: MetaOapg.properties.symbol
    action: MetaOapg.properties.action
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["action"]) -> MetaOapg.properties.action: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["claimWindow"]) -> 'EntitlementClaimWindow': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["params"]) -> 'EntitlementGeneratorParams': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["specialization"]) -> MetaOapg.properties.specialization: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["symbol", "action", "quantity", "claimWindow", "params", "specialization", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["action"]) -> MetaOapg.properties.action: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> typing.Union[MetaOapg.properties.quantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["claimWindow"]) -> typing.Union['EntitlementClaimWindow', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["params"]) -> typing.Union['EntitlementGeneratorParams', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["specialization"]) -> typing.Union[MetaOapg.properties.specialization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["symbol", "action", "quantity", "claimWindow", "params", "specialization", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        symbol: typing.Union[MetaOapg.properties.symbol, str, ],
        action: typing.Union[MetaOapg.properties.action, str, ],
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        claimWindow: typing.Union['EntitlementClaimWindow', schemas.Unset] = schemas.unset,
        params: typing.Union['EntitlementGeneratorParams', schemas.Unset] = schemas.unset,
        specialization: typing.Union[MetaOapg.properties.specialization, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EntitlementGenerator':
        return super().__new__(
            cls,
            *args,
            symbol=symbol,
            action=action,
            quantity=quantity,
            claimWindow=claimWindow,
            params=params,
            specialization=specialization,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.entitlement_claim_window import EntitlementClaimWindow
from beamable_python_sdk.model.entitlement_generator_params import EntitlementGeneratorParams
