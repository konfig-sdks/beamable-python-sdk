# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class EventObjectData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "running",
            "done",
        }
        
        class properties:
            running = schemas.BoolSchema
            done = schemas.BoolSchema
            
            
            class inFlight(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['InFlightMessage']:
                        return InFlightMessage
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['InFlightMessage'], typing.List['InFlightMessage']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'inFlight':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'InFlightMessage':
                    return super().__getitem__(i)
            startTime = schemas.IntSchema
            rootEventId = schemas.StrSchema
            
            
            class state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NOTAVAILABLE(cls):
                    return cls("not-available")
        
            @staticmethod
            def phase() -> typing.Type['EventPhaseRuntime']:
                return EventPhaseRuntime
        
            @staticmethod
            def permissions() -> typing.Type['ClientPermission']:
                return ClientPermission
            lastChildEventId = schemas.StrSchema
            id = schemas.StrSchema
            origin = schemas.StrSchema
        
            @staticmethod
            def content() -> typing.Type['Event']:
                return Event
            leaderboardId = schemas.StrSchema
            __annotations__ = {
                "running": running,
                "done": done,
                "inFlight": inFlight,
                "startTime": startTime,
                "rootEventId": rootEventId,
                "state": state,
                "phase": phase,
                "permissions": permissions,
                "lastChildEventId": lastChildEventId,
                "id": id,
                "origin": origin,
                "content": content,
                "leaderboardId": leaderboardId,
            }
    
    running: MetaOapg.properties.running
    done: MetaOapg.properties.done
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["running"]) -> MetaOapg.properties.running: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["done"]) -> MetaOapg.properties.done: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inFlight"]) -> MetaOapg.properties.inFlight: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startTime"]) -> MetaOapg.properties.startTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rootEventId"]) -> MetaOapg.properties.rootEventId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phase"]) -> 'EventPhaseRuntime': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissions"]) -> 'ClientPermission': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastChildEventId"]) -> MetaOapg.properties.lastChildEventId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origin"]) -> MetaOapg.properties.origin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content"]) -> 'Event': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leaderboardId"]) -> MetaOapg.properties.leaderboardId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["running", "done", "inFlight", "startTime", "rootEventId", "state", "phase", "permissions", "lastChildEventId", "id", "origin", "content", "leaderboardId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["running"]) -> MetaOapg.properties.running: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["done"]) -> MetaOapg.properties.done: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inFlight"]) -> typing.Union[MetaOapg.properties.inFlight, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startTime"]) -> typing.Union[MetaOapg.properties.startTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rootEventId"]) -> typing.Union[MetaOapg.properties.rootEventId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phase"]) -> typing.Union['EventPhaseRuntime', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissions"]) -> typing.Union['ClientPermission', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastChildEventId"]) -> typing.Union[MetaOapg.properties.lastChildEventId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origin"]) -> typing.Union[MetaOapg.properties.origin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content"]) -> typing.Union['Event', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leaderboardId"]) -> typing.Union[MetaOapg.properties.leaderboardId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["running", "done", "inFlight", "startTime", "rootEventId", "state", "phase", "permissions", "lastChildEventId", "id", "origin", "content", "leaderboardId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        running: typing.Union[MetaOapg.properties.running, bool, ],
        done: typing.Union[MetaOapg.properties.done, bool, ],
        inFlight: typing.Union[MetaOapg.properties.inFlight, list, tuple, schemas.Unset] = schemas.unset,
        startTime: typing.Union[MetaOapg.properties.startTime, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rootEventId: typing.Union[MetaOapg.properties.rootEventId, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        phase: typing.Union['EventPhaseRuntime', schemas.Unset] = schemas.unset,
        permissions: typing.Union['ClientPermission', schemas.Unset] = schemas.unset,
        lastChildEventId: typing.Union[MetaOapg.properties.lastChildEventId, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        origin: typing.Union[MetaOapg.properties.origin, str, schemas.Unset] = schemas.unset,
        content: typing.Union['Event', schemas.Unset] = schemas.unset,
        leaderboardId: typing.Union[MetaOapg.properties.leaderboardId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EventObjectData':
        return super().__new__(
            cls,
            *args,
            running=running,
            done=done,
            inFlight=inFlight,
            startTime=startTime,
            rootEventId=rootEventId,
            state=state,
            phase=phase,
            permissions=permissions,
            lastChildEventId=lastChildEventId,
            id=id,
            origin=origin,
            content=content,
            leaderboardId=leaderboardId,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.client_permission import ClientPermission
from beamable_python_sdk.model.event import Event
from beamable_python_sdk.model.event_phase_runtime import EventPhaseRuntime
from beamable_python_sdk.model.in_flight_message import InFlightMessage
