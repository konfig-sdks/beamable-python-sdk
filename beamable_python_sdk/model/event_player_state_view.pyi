# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class EventPlayerStateView(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "running",
            "score",
            "secondsRemaining",
            "rank",
        }
        
        class properties:
            running = schemas.BoolSchema
            rank = schemas.IntSchema
            score = schemas.NumberSchema
            secondsRemaining = schemas.IntSchema
            name = schemas.StrSchema
            
            
            class allPhases(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EventPlayerPhaseView']:
                        return EventPlayerPhaseView
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EventPlayerPhaseView'], typing.List['EventPlayerPhaseView']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allPhases':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EventPlayerPhaseView':
                    return super().__getitem__(i)
        
            @staticmethod
            def currentPhase() -> typing.Type['EventPlayerPhaseView']:
                return EventPlayerPhaseView
            id = schemas.StrSchema
            leaderboardId = schemas.StrSchema
            
            
            class rankRewards(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EventPlayerReward']:
                        return EventPlayerReward
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EventPlayerReward'], typing.List['EventPlayerReward']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'rankRewards':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EventPlayerReward':
                    return super().__getitem__(i)
            
            
            class scoreRewards(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EventPlayerReward']:
                        return EventPlayerReward
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EventPlayerReward'], typing.List['EventPlayerReward']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scoreRewards':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EventPlayerReward':
                    return super().__getitem__(i)
            __annotations__ = {
                "running": running,
                "rank": rank,
                "score": score,
                "secondsRemaining": secondsRemaining,
                "name": name,
                "allPhases": allPhases,
                "currentPhase": currentPhase,
                "id": id,
                "leaderboardId": leaderboardId,
                "rankRewards": rankRewards,
                "scoreRewards": scoreRewards,
            }
    
    running: MetaOapg.properties.running
    score: MetaOapg.properties.score
    secondsRemaining: MetaOapg.properties.secondsRemaining
    rank: MetaOapg.properties.rank
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["running"]) -> MetaOapg.properties.running: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rank"]) -> MetaOapg.properties.rank: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondsRemaining"]) -> MetaOapg.properties.secondsRemaining: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allPhases"]) -> MetaOapg.properties.allPhases: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentPhase"]) -> 'EventPlayerPhaseView': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leaderboardId"]) -> MetaOapg.properties.leaderboardId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rankRewards"]) -> MetaOapg.properties.rankRewards: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scoreRewards"]) -> MetaOapg.properties.scoreRewards: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["running", "rank", "score", "secondsRemaining", "name", "allPhases", "currentPhase", "id", "leaderboardId", "rankRewards", "scoreRewards", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["running"]) -> MetaOapg.properties.running: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rank"]) -> MetaOapg.properties.rank: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondsRemaining"]) -> MetaOapg.properties.secondsRemaining: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allPhases"]) -> typing.Union[MetaOapg.properties.allPhases, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentPhase"]) -> typing.Union['EventPlayerPhaseView', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leaderboardId"]) -> typing.Union[MetaOapg.properties.leaderboardId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rankRewards"]) -> typing.Union[MetaOapg.properties.rankRewards, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scoreRewards"]) -> typing.Union[MetaOapg.properties.scoreRewards, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["running", "rank", "score", "secondsRemaining", "name", "allPhases", "currentPhase", "id", "leaderboardId", "rankRewards", "scoreRewards", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        running: typing.Union[MetaOapg.properties.running, bool, ],
        score: typing.Union[MetaOapg.properties.score, decimal.Decimal, int, float, ],
        secondsRemaining: typing.Union[MetaOapg.properties.secondsRemaining, decimal.Decimal, int, ],
        rank: typing.Union[MetaOapg.properties.rank, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        allPhases: typing.Union[MetaOapg.properties.allPhases, list, tuple, schemas.Unset] = schemas.unset,
        currentPhase: typing.Union['EventPlayerPhaseView', schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        leaderboardId: typing.Union[MetaOapg.properties.leaderboardId, str, schemas.Unset] = schemas.unset,
        rankRewards: typing.Union[MetaOapg.properties.rankRewards, list, tuple, schemas.Unset] = schemas.unset,
        scoreRewards: typing.Union[MetaOapg.properties.scoreRewards, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EventPlayerStateView':
        return super().__new__(
            cls,
            *args,
            running=running,
            score=score,
            secondsRemaining=secondsRemaining,
            rank=rank,
            name=name,
            allPhases=allPhases,
            currentPhase=currentPhase,
            id=id,
            leaderboardId=leaderboardId,
            rankRewards=rankRewards,
            scoreRewards=scoreRewards,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.event_player_phase_view import EventPlayerPhaseView
from beamable_python_sdk.model.event_player_reward import EventPlayerReward
