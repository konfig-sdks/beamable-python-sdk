# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class EventRewardItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "min",
        }
        
        class properties:
            min = schemas.NumberSchema
            
            
            class currencies(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EventInventoryRewardCurrency']:
                        return EventInventoryRewardCurrency
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EventInventoryRewardCurrency'], typing.List['EventInventoryRewardCurrency']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'currencies':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EventInventoryRewardCurrency':
                    return super().__getitem__(i)
            
            
            class items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EventInventoryRewardItem']:
                        return EventInventoryRewardItem
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EventInventoryRewardItem'], typing.List['EventInventoryRewardItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'items':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EventInventoryRewardItem':
                    return super().__getitem__(i)
            max = schemas.NumberSchema
            
            
            class obtain(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EventRewardObtain']:
                        return EventRewardObtain
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EventRewardObtain'], typing.List['EventRewardObtain']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'obtain':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EventRewardObtain':
                    return super().__getitem__(i)
            __annotations__ = {
                "min": min,
                "currencies": currencies,
                "items": items,
                "max": max,
                "obtain": obtain,
            }
    
    min: MetaOapg.properties.min
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["min"]) -> MetaOapg.properties.min: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencies"]) -> MetaOapg.properties.currencies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max"]) -> MetaOapg.properties.max: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["obtain"]) -> MetaOapg.properties.obtain: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["min", "currencies", "items", "max", "obtain", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["min"]) -> MetaOapg.properties.min: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencies"]) -> typing.Union[MetaOapg.properties.currencies, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union[MetaOapg.properties.items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max"]) -> typing.Union[MetaOapg.properties.max, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["obtain"]) -> typing.Union[MetaOapg.properties.obtain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["min", "currencies", "items", "max", "obtain", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        min: typing.Union[MetaOapg.properties.min, decimal.Decimal, int, float, ],
        currencies: typing.Union[MetaOapg.properties.currencies, list, tuple, schemas.Unset] = schemas.unset,
        items: typing.Union[MetaOapg.properties.items, list, tuple, schemas.Unset] = schemas.unset,
        max: typing.Union[MetaOapg.properties.max, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        obtain: typing.Union[MetaOapg.properties.obtain, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EventRewardItem':
        return super().__new__(
            cls,
            *args,
            min=min,
            currencies=currencies,
            items=items,
            max=max,
            obtain=obtain,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.event_inventory_reward_currency import EventInventoryRewardCurrency
from beamable_python_sdk.model.event_inventory_reward_item import EventInventoryRewardItem
from beamable_python_sdk.model.event_reward_obtain import EventRewardObtain
