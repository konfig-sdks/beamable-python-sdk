# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class Group(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "leader",
            "freeSlots",
            "maxSize",
            "id",
            "requirement",
        }
        
        class properties:
            freeSlots = schemas.IntSchema
            leader = schemas.IntSchema
            requirement = schemas.IntSchema
            id = schemas.IntSchema
            maxSize = schemas.IntSchema
            version = schemas.IntSchema
            
            
            class inFlight(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['InFlightMessage']:
                        return InFlightMessage
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['InFlightMessage'], typing.List['InFlightMessage']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'inFlight':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'InFlightMessage':
                    return super().__getitem__(i)
            name = schemas.StrSchema
            enrollmentType = schemas.StrSchema
            
            
            class donations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DonationRequest']:
                        return DonationRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DonationRequest'], typing.List['DonationRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'donations':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DonationRequest':
                    return super().__getitem__(i)
        
            @staticmethod
            def maybeDonations() -> typing.Type['GroupMaybeDonations']:
                return GroupMaybeDonations
            tag = schemas.StrSchema
            canUpdateMOTD = schemas.BoolSchema
            shard = schemas.StrSchema
            canUpdateSlogan = schemas.BoolSchema
            slogan = schemas.StrSchema
            motd = schemas.StrSchema
            clientData = schemas.StrSchema
            
            
            class roles(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['GroupRole']:
                        return GroupRole
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['GroupRole'], typing.List['GroupRole']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'roles':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'GroupRole':
                    return super().__getitem__(i)
        
            @staticmethod
            def scores() -> typing.Type['GroupScores']:
                return GroupScores
            canUpdateEnrollment = schemas.BoolSchema
            
            
            class members(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Member']:
                        return Member
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Member'], typing.List['Member']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'members':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Member':
                    return super().__getitem__(i)
            canDisband = schemas.BoolSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NOTAVAILABLE(cls):
                    return cls("not-available")
            
            
            class subGroups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Group']:
                        return Group
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Group'], typing.List['Group']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subGroups':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Group':
                    return super().__getitem__(i)
            created = schemas.IntSchema
            __annotations__ = {
                "freeSlots": freeSlots,
                "leader": leader,
                "requirement": requirement,
                "id": id,
                "maxSize": maxSize,
                "version": version,
                "inFlight": inFlight,
                "name": name,
                "enrollmentType": enrollmentType,
                "donations": donations,
                "maybeDonations": maybeDonations,
                "tag": tag,
                "canUpdateMOTD": canUpdateMOTD,
                "shard": shard,
                "canUpdateSlogan": canUpdateSlogan,
                "slogan": slogan,
                "motd": motd,
                "clientData": clientData,
                "roles": roles,
                "scores": scores,
                "canUpdateEnrollment": canUpdateEnrollment,
                "members": members,
                "canDisband": canDisband,
                "type": type,
                "subGroups": subGroups,
                "created": created,
            }
    
    leader: MetaOapg.properties.leader
    freeSlots: MetaOapg.properties.freeSlots
    maxSize: MetaOapg.properties.maxSize
    id: MetaOapg.properties.id
    requirement: MetaOapg.properties.requirement
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["freeSlots"]) -> MetaOapg.properties.freeSlots: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leader"]) -> MetaOapg.properties.leader: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requirement"]) -> MetaOapg.properties.requirement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxSize"]) -> MetaOapg.properties.maxSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inFlight"]) -> MetaOapg.properties.inFlight: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enrollmentType"]) -> MetaOapg.properties.enrollmentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["donations"]) -> MetaOapg.properties.donations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maybeDonations"]) -> 'GroupMaybeDonations': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag"]) -> MetaOapg.properties.tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canUpdateMOTD"]) -> MetaOapg.properties.canUpdateMOTD: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shard"]) -> MetaOapg.properties.shard: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canUpdateSlogan"]) -> MetaOapg.properties.canUpdateSlogan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slogan"]) -> MetaOapg.properties.slogan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["motd"]) -> MetaOapg.properties.motd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientData"]) -> MetaOapg.properties.clientData: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roles"]) -> MetaOapg.properties.roles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scores"]) -> 'GroupScores': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canUpdateEnrollment"]) -> MetaOapg.properties.canUpdateEnrollment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["members"]) -> MetaOapg.properties.members: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canDisband"]) -> MetaOapg.properties.canDisband: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subGroups"]) -> MetaOapg.properties.subGroups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["freeSlots", "leader", "requirement", "id", "maxSize", "version", "inFlight", "name", "enrollmentType", "donations", "maybeDonations", "tag", "canUpdateMOTD", "shard", "canUpdateSlogan", "slogan", "motd", "clientData", "roles", "scores", "canUpdateEnrollment", "members", "canDisband", "type", "subGroups", "created", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["freeSlots"]) -> MetaOapg.properties.freeSlots: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leader"]) -> MetaOapg.properties.leader: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requirement"]) -> MetaOapg.properties.requirement: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxSize"]) -> MetaOapg.properties.maxSize: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inFlight"]) -> typing.Union[MetaOapg.properties.inFlight, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enrollmentType"]) -> typing.Union[MetaOapg.properties.enrollmentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["donations"]) -> typing.Union[MetaOapg.properties.donations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maybeDonations"]) -> typing.Union['GroupMaybeDonations', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> typing.Union[MetaOapg.properties.tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canUpdateMOTD"]) -> typing.Union[MetaOapg.properties.canUpdateMOTD, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shard"]) -> typing.Union[MetaOapg.properties.shard, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canUpdateSlogan"]) -> typing.Union[MetaOapg.properties.canUpdateSlogan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slogan"]) -> typing.Union[MetaOapg.properties.slogan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["motd"]) -> typing.Union[MetaOapg.properties.motd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientData"]) -> typing.Union[MetaOapg.properties.clientData, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roles"]) -> typing.Union[MetaOapg.properties.roles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scores"]) -> typing.Union['GroupScores', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canUpdateEnrollment"]) -> typing.Union[MetaOapg.properties.canUpdateEnrollment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["members"]) -> typing.Union[MetaOapg.properties.members, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canDisband"]) -> typing.Union[MetaOapg.properties.canDisband, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subGroups"]) -> typing.Union[MetaOapg.properties.subGroups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["freeSlots", "leader", "requirement", "id", "maxSize", "version", "inFlight", "name", "enrollmentType", "donations", "maybeDonations", "tag", "canUpdateMOTD", "shard", "canUpdateSlogan", "slogan", "motd", "clientData", "roles", "scores", "canUpdateEnrollment", "members", "canDisband", "type", "subGroups", "created", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        leader: typing.Union[MetaOapg.properties.leader, decimal.Decimal, int, ],
        freeSlots: typing.Union[MetaOapg.properties.freeSlots, decimal.Decimal, int, ],
        maxSize: typing.Union[MetaOapg.properties.maxSize, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        requirement: typing.Union[MetaOapg.properties.requirement, decimal.Decimal, int, ],
        version: typing.Union[MetaOapg.properties.version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        inFlight: typing.Union[MetaOapg.properties.inFlight, list, tuple, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        enrollmentType: typing.Union[MetaOapg.properties.enrollmentType, str, schemas.Unset] = schemas.unset,
        donations: typing.Union[MetaOapg.properties.donations, list, tuple, schemas.Unset] = schemas.unset,
        maybeDonations: typing.Union['GroupMaybeDonations', schemas.Unset] = schemas.unset,
        tag: typing.Union[MetaOapg.properties.tag, str, schemas.Unset] = schemas.unset,
        canUpdateMOTD: typing.Union[MetaOapg.properties.canUpdateMOTD, bool, schemas.Unset] = schemas.unset,
        shard: typing.Union[MetaOapg.properties.shard, str, schemas.Unset] = schemas.unset,
        canUpdateSlogan: typing.Union[MetaOapg.properties.canUpdateSlogan, bool, schemas.Unset] = schemas.unset,
        slogan: typing.Union[MetaOapg.properties.slogan, str, schemas.Unset] = schemas.unset,
        motd: typing.Union[MetaOapg.properties.motd, str, schemas.Unset] = schemas.unset,
        clientData: typing.Union[MetaOapg.properties.clientData, str, schemas.Unset] = schemas.unset,
        roles: typing.Union[MetaOapg.properties.roles, list, tuple, schemas.Unset] = schemas.unset,
        scores: typing.Union['GroupScores', schemas.Unset] = schemas.unset,
        canUpdateEnrollment: typing.Union[MetaOapg.properties.canUpdateEnrollment, bool, schemas.Unset] = schemas.unset,
        members: typing.Union[MetaOapg.properties.members, list, tuple, schemas.Unset] = schemas.unset,
        canDisband: typing.Union[MetaOapg.properties.canDisband, bool, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        subGroups: typing.Union[MetaOapg.properties.subGroups, list, tuple, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Group':
        return super().__new__(
            cls,
            *args,
            leader=leader,
            freeSlots=freeSlots,
            maxSize=maxSize,
            id=id,
            requirement=requirement,
            version=version,
            inFlight=inFlight,
            name=name,
            enrollmentType=enrollmentType,
            donations=donations,
            maybeDonations=maybeDonations,
            tag=tag,
            canUpdateMOTD=canUpdateMOTD,
            shard=shard,
            canUpdateSlogan=canUpdateSlogan,
            slogan=slogan,
            motd=motd,
            clientData=clientData,
            roles=roles,
            scores=scores,
            canUpdateEnrollment=canUpdateEnrollment,
            members=members,
            canDisband=canDisband,
            type=type,
            subGroups=subGroups,
            created=created,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.donation_request import DonationRequest
from beamable_python_sdk.model.group_maybe_donations import GroupMaybeDonations
from beamable_python_sdk.model.group_role import GroupRole
from beamable_python_sdk.model.group_scores import GroupScores
from beamable_python_sdk.model.in_flight_message import InFlightMessage
from beamable_python_sdk.model.member import Member
