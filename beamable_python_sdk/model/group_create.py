# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class GroupCreate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "maxSize",
            "requirement",
        }
        
        class properties:
            requirement = schemas.IntSchema
            maxSize = schemas.IntSchema
            name = schemas.StrSchema
            enrollmentType = schemas.StrSchema
            tag = schemas.StrSchema
            clientData = schemas.StrSchema
            
            
            class scores(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['GroupScoreBinding']:
                        return GroupScoreBinding
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['GroupScoreBinding'], typing.List['GroupScoreBinding']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scores':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'GroupScoreBinding':
                    return super().__getitem__(i)
            time = schemas.IntSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "not-available": "NOTAVAILABLE",
                    }
                
                @schemas.classproperty
                def NOTAVAILABLE(cls):
                    return cls("not-available")
            group = schemas.IntSchema
            __annotations__ = {
                "requirement": requirement,
                "maxSize": maxSize,
                "name": name,
                "enrollmentType": enrollmentType,
                "tag": tag,
                "clientData": clientData,
                "scores": scores,
                "time": time,
                "type": type,
                "group": group,
            }
    
    maxSize: MetaOapg.properties.maxSize
    requirement: MetaOapg.properties.requirement
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requirement"]) -> MetaOapg.properties.requirement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxSize"]) -> MetaOapg.properties.maxSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enrollmentType"]) -> MetaOapg.properties.enrollmentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag"]) -> MetaOapg.properties.tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientData"]) -> MetaOapg.properties.clientData: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scores"]) -> MetaOapg.properties.scores: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> MetaOapg.properties.group: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["requirement", "maxSize", "name", "enrollmentType", "tag", "clientData", "scores", "time", "type", "group", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requirement"]) -> MetaOapg.properties.requirement: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxSize"]) -> MetaOapg.properties.maxSize: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enrollmentType"]) -> typing.Union[MetaOapg.properties.enrollmentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> typing.Union[MetaOapg.properties.tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientData"]) -> typing.Union[MetaOapg.properties.clientData, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scores"]) -> typing.Union[MetaOapg.properties.scores, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> typing.Union[MetaOapg.properties.time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> typing.Union[MetaOapg.properties.group, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["requirement", "maxSize", "name", "enrollmentType", "tag", "clientData", "scores", "time", "type", "group", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        maxSize: typing.Union[MetaOapg.properties.maxSize, decimal.Decimal, int, ],
        requirement: typing.Union[MetaOapg.properties.requirement, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        enrollmentType: typing.Union[MetaOapg.properties.enrollmentType, str, schemas.Unset] = schemas.unset,
        tag: typing.Union[MetaOapg.properties.tag, str, schemas.Unset] = schemas.unset,
        clientData: typing.Union[MetaOapg.properties.clientData, str, schemas.Unset] = schemas.unset,
        scores: typing.Union[MetaOapg.properties.scores, list, tuple, schemas.Unset] = schemas.unset,
        time: typing.Union[MetaOapg.properties.time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        group: typing.Union[MetaOapg.properties.group, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GroupCreate':
        return super().__new__(
            cls,
            *args,
            maxSize=maxSize,
            requirement=requirement,
            name=name,
            enrollmentType=enrollmentType,
            tag=tag,
            clientData=clientData,
            scores=scores,
            time=time,
            type=type,
            group=group,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.group_score_binding import GroupScoreBinding
