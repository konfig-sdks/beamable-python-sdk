# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class GroupUpdate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            enrollmentType = schemas.StrSchema
            tag = schemas.StrSchema
            slogan = schemas.StrSchema
            requirement = schemas.IntSchema
            motd = schemas.StrSchema
            clientData = schemas.StrSchema
            subGroup = schemas.IntSchema
            __annotations__ = {
                "name": name,
                "enrollmentType": enrollmentType,
                "tag": tag,
                "slogan": slogan,
                "requirement": requirement,
                "motd": motd,
                "clientData": clientData,
                "subGroup": subGroup,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enrollmentType"]) -> MetaOapg.properties.enrollmentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag"]) -> MetaOapg.properties.tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slogan"]) -> MetaOapg.properties.slogan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requirement"]) -> MetaOapg.properties.requirement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["motd"]) -> MetaOapg.properties.motd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientData"]) -> MetaOapg.properties.clientData: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subGroup"]) -> MetaOapg.properties.subGroup: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "enrollmentType", "tag", "slogan", "requirement", "motd", "clientData", "subGroup", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enrollmentType"]) -> typing.Union[MetaOapg.properties.enrollmentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> typing.Union[MetaOapg.properties.tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slogan"]) -> typing.Union[MetaOapg.properties.slogan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requirement"]) -> typing.Union[MetaOapg.properties.requirement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["motd"]) -> typing.Union[MetaOapg.properties.motd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientData"]) -> typing.Union[MetaOapg.properties.clientData, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subGroup"]) -> typing.Union[MetaOapg.properties.subGroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "enrollmentType", "tag", "slogan", "requirement", "motd", "clientData", "subGroup", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        enrollmentType: typing.Union[MetaOapg.properties.enrollmentType, str, schemas.Unset] = schemas.unset,
        tag: typing.Union[MetaOapg.properties.tag, str, schemas.Unset] = schemas.unset,
        slogan: typing.Union[MetaOapg.properties.slogan, str, schemas.Unset] = schemas.unset,
        requirement: typing.Union[MetaOapg.properties.requirement, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        motd: typing.Union[MetaOapg.properties.motd, str, schemas.Unset] = schemas.unset,
        clientData: typing.Union[MetaOapg.properties.clientData, str, schemas.Unset] = schemas.unset,
        subGroup: typing.Union[MetaOapg.properties.subGroup, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GroupUpdate':
        return super().__new__(
            cls,
            *args,
            name=name,
            enrollmentType=enrollmentType,
            tag=tag,
            slogan=slogan,
            requirement=requirement,
            motd=motd,
            clientData=clientData,
            subGroup=subGroup,
            _configuration=_configuration,
            **kwargs,
        )
