# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class GroupUser(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "gamerTag",
        }
        
        class properties:
            gamerTag = schemas.IntSchema
            
            
            class inFlight(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['InFlightMessage']:
                        return InFlightMessage
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['InFlightMessage'], typing.List['InFlightMessage']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'inFlight':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'InFlightMessage':
                    return super().__getitem__(i)
            
            
            class allGroups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['GroupUserMember']:
                        return GroupUserMember
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['GroupUserMember'], typing.List['GroupUserMember']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allGroups':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'GroupUserMember':
                    return super().__getitem__(i)
            updated = schemas.IntSchema
        
            @staticmethod
            def member() -> typing.Type['GroupUserMember']:
                return GroupUserMember
            
            
            class scores(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['GroupScoreBinding']:
                        return GroupScoreBinding
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['GroupScoreBinding'], typing.List['GroupScoreBinding']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scores':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'GroupScoreBinding':
                    return super().__getitem__(i)
            __annotations__ = {
                "gamerTag": gamerTag,
                "inFlight": inFlight,
                "allGroups": allGroups,
                "updated": updated,
                "member": member,
                "scores": scores,
            }
    
    gamerTag: MetaOapg.properties.gamerTag
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gamerTag"]) -> MetaOapg.properties.gamerTag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inFlight"]) -> MetaOapg.properties.inFlight: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allGroups"]) -> MetaOapg.properties.allGroups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["member"]) -> 'GroupUserMember': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scores"]) -> MetaOapg.properties.scores: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["gamerTag", "inFlight", "allGroups", "updated", "member", "scores", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gamerTag"]) -> MetaOapg.properties.gamerTag: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inFlight"]) -> typing.Union[MetaOapg.properties.inFlight, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allGroups"]) -> typing.Union[MetaOapg.properties.allGroups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> typing.Union[MetaOapg.properties.updated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["member"]) -> typing.Union['GroupUserMember', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scores"]) -> typing.Union[MetaOapg.properties.scores, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["gamerTag", "inFlight", "allGroups", "updated", "member", "scores", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        gamerTag: typing.Union[MetaOapg.properties.gamerTag, decimal.Decimal, int, ],
        inFlight: typing.Union[MetaOapg.properties.inFlight, list, tuple, schemas.Unset] = schemas.unset,
        allGroups: typing.Union[MetaOapg.properties.allGroups, list, tuple, schemas.Unset] = schemas.unset,
        updated: typing.Union[MetaOapg.properties.updated, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        member: typing.Union['GroupUserMember', schemas.Unset] = schemas.unset,
        scores: typing.Union[MetaOapg.properties.scores, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GroupUser':
        return super().__new__(
            cls,
            *args,
            gamerTag=gamerTag,
            inFlight=inFlight,
            allGroups=allGroups,
            updated=updated,
            member=member,
            scores=scores,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.group_score_binding import GroupScoreBinding
from beamable_python_sdk.model.group_user_member import GroupUserMember
from beamable_python_sdk.model.in_flight_message import InFlightMessage
