# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class InventoryUpdateRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "itemContentIds",
            "currencyContentIds",
            "empty",
        }
        
        class properties:
            empty = schemas.BoolSchema
        
            @staticmethod
            def currencyContentIds() -> typing.Type['InventoryUpdateRequestCurrencyContentIds']:
                return InventoryUpdateRequestCurrencyContentIds
        
            @staticmethod
            def itemContentIds() -> typing.Type['InventoryUpdateRequestItemContentIds']:
                return InventoryUpdateRequestItemContentIds
        
            @staticmethod
            def currencies() -> typing.Type['InventoryUpdateRequestCurrencies']:
                return InventoryUpdateRequestCurrencies
        
            @staticmethod
            def currencyProperties() -> typing.Type['InventoryUpdateRequestCurrencyProperties']:
                return InventoryUpdateRequestCurrencyProperties
            applyVipBonus = schemas.BoolSchema
            
            
            class updateItems(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ItemUpdateRequest']:
                        return ItemUpdateRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ItemUpdateRequest'], typing.List['ItemUpdateRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'updateItems':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ItemUpdateRequest':
                    return super().__getitem__(i)
            
            
            class newItems(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ItemCreateRequest']:
                        return ItemCreateRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ItemCreateRequest'], typing.List['ItemCreateRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'newItems':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ItemCreateRequest':
                    return super().__getitem__(i)
            transaction = schemas.StrSchema
            
            
            class deleteItems(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ItemDeleteRequest']:
                        return ItemDeleteRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ItemDeleteRequest'], typing.List['ItemDeleteRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deleteItems':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ItemDeleteRequest':
                    return super().__getitem__(i)
            __annotations__ = {
                "empty": empty,
                "currencyContentIds": currencyContentIds,
                "itemContentIds": itemContentIds,
                "currencies": currencies,
                "currencyProperties": currencyProperties,
                "applyVipBonus": applyVipBonus,
                "updateItems": updateItems,
                "newItems": newItems,
                "transaction": transaction,
                "deleteItems": deleteItems,
            }
    
    itemContentIds: 'InventoryUpdateRequestItemContentIds'
    currencyContentIds: 'InventoryUpdateRequestCurrencyContentIds'
    empty: MetaOapg.properties.empty
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["empty"]) -> MetaOapg.properties.empty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyContentIds"]) -> 'InventoryUpdateRequestCurrencyContentIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemContentIds"]) -> 'InventoryUpdateRequestItemContentIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencies"]) -> 'InventoryUpdateRequestCurrencies': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyProperties"]) -> 'InventoryUpdateRequestCurrencyProperties': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applyVipBonus"]) -> MetaOapg.properties.applyVipBonus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateItems"]) -> MetaOapg.properties.updateItems: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["newItems"]) -> MetaOapg.properties.newItems: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction"]) -> MetaOapg.properties.transaction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleteItems"]) -> MetaOapg.properties.deleteItems: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["empty", "currencyContentIds", "itemContentIds", "currencies", "currencyProperties", "applyVipBonus", "updateItems", "newItems", "transaction", "deleteItems", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["empty"]) -> MetaOapg.properties.empty: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyContentIds"]) -> 'InventoryUpdateRequestCurrencyContentIds': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemContentIds"]) -> 'InventoryUpdateRequestItemContentIds': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencies"]) -> typing.Union['InventoryUpdateRequestCurrencies', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyProperties"]) -> typing.Union['InventoryUpdateRequestCurrencyProperties', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applyVipBonus"]) -> typing.Union[MetaOapg.properties.applyVipBonus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateItems"]) -> typing.Union[MetaOapg.properties.updateItems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["newItems"]) -> typing.Union[MetaOapg.properties.newItems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction"]) -> typing.Union[MetaOapg.properties.transaction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleteItems"]) -> typing.Union[MetaOapg.properties.deleteItems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["empty", "currencyContentIds", "itemContentIds", "currencies", "currencyProperties", "applyVipBonus", "updateItems", "newItems", "transaction", "deleteItems", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        itemContentIds: 'InventoryUpdateRequestItemContentIds',
        currencyContentIds: 'InventoryUpdateRequestCurrencyContentIds',
        empty: typing.Union[MetaOapg.properties.empty, bool, ],
        currencies: typing.Union['InventoryUpdateRequestCurrencies', schemas.Unset] = schemas.unset,
        currencyProperties: typing.Union['InventoryUpdateRequestCurrencyProperties', schemas.Unset] = schemas.unset,
        applyVipBonus: typing.Union[MetaOapg.properties.applyVipBonus, bool, schemas.Unset] = schemas.unset,
        updateItems: typing.Union[MetaOapg.properties.updateItems, list, tuple, schemas.Unset] = schemas.unset,
        newItems: typing.Union[MetaOapg.properties.newItems, list, tuple, schemas.Unset] = schemas.unset,
        transaction: typing.Union[MetaOapg.properties.transaction, str, schemas.Unset] = schemas.unset,
        deleteItems: typing.Union[MetaOapg.properties.deleteItems, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InventoryUpdateRequest':
        return super().__new__(
            cls,
            *args,
            itemContentIds=itemContentIds,
            currencyContentIds=currencyContentIds,
            empty=empty,
            currencies=currencies,
            currencyProperties=currencyProperties,
            applyVipBonus=applyVipBonus,
            updateItems=updateItems,
            newItems=newItems,
            transaction=transaction,
            deleteItems=deleteItems,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.inventory_update_request_currencies import InventoryUpdateRequestCurrencies
from beamable_python_sdk.model.inventory_update_request_currency_content_ids import InventoryUpdateRequestCurrencyContentIds
from beamable_python_sdk.model.inventory_update_request_currency_properties import InventoryUpdateRequestCurrencyProperties
from beamable_python_sdk.model.inventory_update_request_item_content_ids import InventoryUpdateRequestItemContentIds
from beamable_python_sdk.model.item_create_request import ItemCreateRequest
from beamable_python_sdk.model.item_delete_request import ItemDeleteRequest
from beamable_python_sdk.model.item_update_request import ItemUpdateRequest
