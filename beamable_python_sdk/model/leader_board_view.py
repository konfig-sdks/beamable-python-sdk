# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class LeaderBoardView(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "boardSize",
        }
        
        class properties:
            boardSize = schemas.Int64Schema
            lbId = schemas.StrSchema
        
            @staticmethod
            def rankgt() -> typing.Type['RankEntry']:
                return RankEntry
            
            
            class rankings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RankEntry']:
                        return RankEntry
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['RankEntry'], typing.List['RankEntry']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'rankings':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RankEntry':
                    return super().__getitem__(i)
            __annotations__ = {
                "boardSize": boardSize,
                "lbId": lbId,
                "rankgt": rankgt,
                "rankings": rankings,
            }
    
    boardSize: MetaOapg.properties.boardSize
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["boardSize"]) -> MetaOapg.properties.boardSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lbId"]) -> MetaOapg.properties.lbId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rankgt"]) -> 'RankEntry': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rankings"]) -> MetaOapg.properties.rankings: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["boardSize", "lbId", "rankgt", "rankings", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["boardSize"]) -> MetaOapg.properties.boardSize: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lbId"]) -> typing.Union[MetaOapg.properties.lbId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rankgt"]) -> typing.Union['RankEntry', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rankings"]) -> typing.Union[MetaOapg.properties.rankings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["boardSize", "lbId", "rankgt", "rankings", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        boardSize: typing.Union[MetaOapg.properties.boardSize, decimal.Decimal, int, ],
        lbId: typing.Union[MetaOapg.properties.lbId, str, schemas.Unset] = schemas.unset,
        rankgt: typing.Union['RankEntry', schemas.Unset] = schemas.unset,
        rankings: typing.Union[MetaOapg.properties.rankings, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LeaderBoardView':
        return super().__new__(
            cls,
            *args,
            boardSize=boardSize,
            lbId=lbId,
            rankgt=rankgt,
            rankings=rankings,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.rank_entry import RankEntry
