# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class LeaderboardApiViewRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            max = schemas.IntSchema
            focus = schemas.IntSchema
            friends = schemas.BoolSchema
            _from = schemas.IntSchema
            outlier = schemas.IntSchema
            guild = schemas.BoolSchema
            __annotations__ = {
                "max": max,
                "focus": focus,
                "friends": friends,
                "from": _from,
                "outlier": outlier,
                "guild": guild,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max"]) -> MetaOapg.properties.max: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["focus"]) -> MetaOapg.properties.focus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["friends"]) -> MetaOapg.properties.friends: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outlier"]) -> MetaOapg.properties.outlier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guild"]) -> MetaOapg.properties.guild: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["max", "focus", "friends", "from", "outlier", "guild", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max"]) -> typing.Union[MetaOapg.properties.max, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["focus"]) -> typing.Union[MetaOapg.properties.focus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["friends"]) -> typing.Union[MetaOapg.properties.friends, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> typing.Union[MetaOapg.properties._from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outlier"]) -> typing.Union[MetaOapg.properties.outlier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guild"]) -> typing.Union[MetaOapg.properties.guild, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["max", "focus", "friends", "from", "outlier", "guild", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        max: typing.Union[MetaOapg.properties.max, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        focus: typing.Union[MetaOapg.properties.focus, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        friends: typing.Union[MetaOapg.properties.friends, bool, schemas.Unset] = schemas.unset,
        outlier: typing.Union[MetaOapg.properties.outlier, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        guild: typing.Union[MetaOapg.properties.guild, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LeaderboardApiViewRequest':
        return super().__new__(
            cls,
            *args,
            max=max,
            focus=focus,
            friends=friends,
            outlier=outlier,
            guild=guild,
            _configuration=_configuration,
            **kwargs,
        )
