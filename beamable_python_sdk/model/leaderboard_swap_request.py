# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class LeaderboardSwapRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "delta",
            "swapBase",
        }
        
        class properties:
            swapBase = schemas.IntSchema
            delta = schemas.IntSchema
            winnerId = schemas.IntSchema
            loserId = schemas.IntSchema
            __annotations__ = {
                "swapBase": swapBase,
                "delta": delta,
                "winnerId": winnerId,
                "loserId": loserId,
            }
    
    delta: MetaOapg.properties.delta
    swapBase: MetaOapg.properties.swapBase
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["swapBase"]) -> MetaOapg.properties.swapBase: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delta"]) -> MetaOapg.properties.delta: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["winnerId"]) -> MetaOapg.properties.winnerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loserId"]) -> MetaOapg.properties.loserId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["swapBase", "delta", "winnerId", "loserId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["swapBase"]) -> MetaOapg.properties.swapBase: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delta"]) -> MetaOapg.properties.delta: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["winnerId"]) -> typing.Union[MetaOapg.properties.winnerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loserId"]) -> typing.Union[MetaOapg.properties.loserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["swapBase", "delta", "winnerId", "loserId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        delta: typing.Union[MetaOapg.properties.delta, decimal.Decimal, int, ],
        swapBase: typing.Union[MetaOapg.properties.swapBase, decimal.Decimal, int, ],
        winnerId: typing.Union[MetaOapg.properties.winnerId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        loserId: typing.Union[MetaOapg.properties.loserId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LeaderboardSwapRequest':
        return super().__new__(
            cls,
            *args,
            delta=delta,
            swapBase=swapBase,
            winnerId=winnerId,
            loserId=loserId,
            _configuration=_configuration,
            **kwargs,
        )
