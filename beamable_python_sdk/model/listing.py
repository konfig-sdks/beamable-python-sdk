# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class Listing(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class cohortRequirements(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CohortRequirement']:
                        return CohortRequirement
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CohortRequirement'], typing.List['CohortRequirement']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cohortRequirements':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CohortRequirement':
                    return super().__getitem__(i)
            offerSymbol = schemas.StrSchema
            purchaseLimit = schemas.IntSchema
        
            @staticmethod
            def price() -> typing.Type['Price']:
                return Price
            
            
            class playerStatRequirements(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PlayerStatRequirement']:
                        return PlayerStatRequirement
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PlayerStatRequirement'], typing.List['PlayerStatRequirement']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'playerStatRequirements':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PlayerStatRequirement':
                    return super().__getitem__(i)
        
            @staticmethod
            def buttonText() -> typing.Type['ListingButtonText']:
                return ListingButtonText
            
            
            class entitlementRequirements(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EntitlementRequirement']:
                        return EntitlementRequirement
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EntitlementRequirement'], typing.List['EntitlementRequirement']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'entitlementRequirements':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EntitlementRequirement':
                    return super().__getitem__(i)
            symbol = schemas.StrSchema
        
            @staticmethod
            def clientData() -> typing.Type['ListingClientData']:
                return ListingClientData
            activeDurationCoolDownSeconds = schemas.IntSchema
            activeDurationSeconds = schemas.IntSchema
            activeDurationPurchaseLimit = schemas.IntSchema
            
            
            class offerRequirements(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['OfferRequirement']:
                        return OfferRequirement
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['OfferRequirement'], typing.List['OfferRequirement']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'offerRequirements':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'OfferRequirement':
                    return super().__getitem__(i)
        
            @staticmethod
            def activePeriod() -> typing.Type['Period']:
                return Period
            __annotations__ = {
                "cohortRequirements": cohortRequirements,
                "offerSymbol": offerSymbol,
                "purchaseLimit": purchaseLimit,
                "price": price,
                "playerStatRequirements": playerStatRequirements,
                "buttonText": buttonText,
                "entitlementRequirements": entitlementRequirements,
                "symbol": symbol,
                "clientData": clientData,
                "activeDurationCoolDownSeconds": activeDurationCoolDownSeconds,
                "activeDurationSeconds": activeDurationSeconds,
                "activeDurationPurchaseLimit": activeDurationPurchaseLimit,
                "offerRequirements": offerRequirements,
                "activePeriod": activePeriod,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cohortRequirements"]) -> MetaOapg.properties.cohortRequirements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["offerSymbol"]) -> MetaOapg.properties.offerSymbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchaseLimit"]) -> MetaOapg.properties.purchaseLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> 'Price': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playerStatRequirements"]) -> MetaOapg.properties.playerStatRequirements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buttonText"]) -> 'ListingButtonText': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entitlementRequirements"]) -> MetaOapg.properties.entitlementRequirements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientData"]) -> 'ListingClientData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activeDurationCoolDownSeconds"]) -> MetaOapg.properties.activeDurationCoolDownSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activeDurationSeconds"]) -> MetaOapg.properties.activeDurationSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activeDurationPurchaseLimit"]) -> MetaOapg.properties.activeDurationPurchaseLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["offerRequirements"]) -> MetaOapg.properties.offerRequirements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activePeriod"]) -> 'Period': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cohortRequirements", "offerSymbol", "purchaseLimit", "price", "playerStatRequirements", "buttonText", "entitlementRequirements", "symbol", "clientData", "activeDurationCoolDownSeconds", "activeDurationSeconds", "activeDurationPurchaseLimit", "offerRequirements", "activePeriod", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cohortRequirements"]) -> typing.Union[MetaOapg.properties.cohortRequirements, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["offerSymbol"]) -> typing.Union[MetaOapg.properties.offerSymbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchaseLimit"]) -> typing.Union[MetaOapg.properties.purchaseLimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> typing.Union['Price', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playerStatRequirements"]) -> typing.Union[MetaOapg.properties.playerStatRequirements, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buttonText"]) -> typing.Union['ListingButtonText', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entitlementRequirements"]) -> typing.Union[MetaOapg.properties.entitlementRequirements, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> typing.Union[MetaOapg.properties.symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientData"]) -> typing.Union['ListingClientData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activeDurationCoolDownSeconds"]) -> typing.Union[MetaOapg.properties.activeDurationCoolDownSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activeDurationSeconds"]) -> typing.Union[MetaOapg.properties.activeDurationSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activeDurationPurchaseLimit"]) -> typing.Union[MetaOapg.properties.activeDurationPurchaseLimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["offerRequirements"]) -> typing.Union[MetaOapg.properties.offerRequirements, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activePeriod"]) -> typing.Union['Period', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cohortRequirements", "offerSymbol", "purchaseLimit", "price", "playerStatRequirements", "buttonText", "entitlementRequirements", "symbol", "clientData", "activeDurationCoolDownSeconds", "activeDurationSeconds", "activeDurationPurchaseLimit", "offerRequirements", "activePeriod", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cohortRequirements: typing.Union[MetaOapg.properties.cohortRequirements, list, tuple, schemas.Unset] = schemas.unset,
        offerSymbol: typing.Union[MetaOapg.properties.offerSymbol, str, schemas.Unset] = schemas.unset,
        purchaseLimit: typing.Union[MetaOapg.properties.purchaseLimit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        price: typing.Union['Price', schemas.Unset] = schemas.unset,
        playerStatRequirements: typing.Union[MetaOapg.properties.playerStatRequirements, list, tuple, schemas.Unset] = schemas.unset,
        buttonText: typing.Union['ListingButtonText', schemas.Unset] = schemas.unset,
        entitlementRequirements: typing.Union[MetaOapg.properties.entitlementRequirements, list, tuple, schemas.Unset] = schemas.unset,
        symbol: typing.Union[MetaOapg.properties.symbol, str, schemas.Unset] = schemas.unset,
        clientData: typing.Union['ListingClientData', schemas.Unset] = schemas.unset,
        activeDurationCoolDownSeconds: typing.Union[MetaOapg.properties.activeDurationCoolDownSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        activeDurationSeconds: typing.Union[MetaOapg.properties.activeDurationSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        activeDurationPurchaseLimit: typing.Union[MetaOapg.properties.activeDurationPurchaseLimit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        offerRequirements: typing.Union[MetaOapg.properties.offerRequirements, list, tuple, schemas.Unset] = schemas.unset,
        activePeriod: typing.Union['Period', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Listing':
        return super().__new__(
            cls,
            *args,
            cohortRequirements=cohortRequirements,
            offerSymbol=offerSymbol,
            purchaseLimit=purchaseLimit,
            price=price,
            playerStatRequirements=playerStatRequirements,
            buttonText=buttonText,
            entitlementRequirements=entitlementRequirements,
            symbol=symbol,
            clientData=clientData,
            activeDurationCoolDownSeconds=activeDurationCoolDownSeconds,
            activeDurationSeconds=activeDurationSeconds,
            activeDurationPurchaseLimit=activeDurationPurchaseLimit,
            offerRequirements=offerRequirements,
            activePeriod=activePeriod,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.cohort_requirement import CohortRequirement
from beamable_python_sdk.model.entitlement_requirement import EntitlementRequirement
from beamable_python_sdk.model.listing_button_text import ListingButtonText
from beamable_python_sdk.model.listing_client_data import ListingClientData
from beamable_python_sdk.model.offer_requirement import OfferRequirement
from beamable_python_sdk.model.period import Period
from beamable_python_sdk.model.player_stat_requirement import PlayerStatRequirement
from beamable_python_sdk.model.price import Price
