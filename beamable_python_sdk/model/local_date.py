# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class LocalDate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "dayOfMonth",
            "dayOfYear",
            "year",
            "monthValue",
            "leapYear",
        }
        
        class properties:
            dayOfYear = schemas.IntSchema
            leapYear = schemas.BoolSchema
            monthValue = schemas.IntSchema
            dayOfMonth = schemas.IntSchema
            year = schemas.IntSchema
        
            @staticmethod
            def chronology() -> typing.Type['IsoChronology']:
                return IsoChronology
            
            
            class dayOfWeek(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "SATURDAY": "SATURDAY",
                        "MONDAY": "MONDAY",
                        "THURSDAY": "THURSDAY",
                        "TUESDAY": "TUESDAY",
                        "FRIDAY": "FRIDAY",
                        "WEDNESDAY": "WEDNESDAY",
                        "SUNDAY": "SUNDAY",
                    }
                
                @schemas.classproperty
                def SATURDAY(cls):
                    return cls("SATURDAY")
                
                @schemas.classproperty
                def MONDAY(cls):
                    return cls("MONDAY")
                
                @schemas.classproperty
                def THURSDAY(cls):
                    return cls("THURSDAY")
                
                @schemas.classproperty
                def TUESDAY(cls):
                    return cls("TUESDAY")
                
                @schemas.classproperty
                def FRIDAY(cls):
                    return cls("FRIDAY")
                
                @schemas.classproperty
                def WEDNESDAY(cls):
                    return cls("WEDNESDAY")
                
                @schemas.classproperty
                def SUNDAY(cls):
                    return cls("SUNDAY")
        
            @staticmethod
            def era() -> typing.Type['Era']:
                return Era
            
            
            class month(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "DECEMBER": "DECEMBER",
                        "APRIL": "APRIL",
                        "JULY": "JULY",
                        "SEPTEMBER": "SEPTEMBER",
                        "JUNE": "JUNE",
                        "FEBRUARY": "FEBRUARY",
                        "OCTOBER": "OCTOBER",
                        "AUGUST": "AUGUST",
                        "NOVEMBER": "NOVEMBER",
                        "MARCH": "MARCH",
                        "MAY": "MAY",
                        "JANUARY": "JANUARY",
                    }
                
                @schemas.classproperty
                def DECEMBER(cls):
                    return cls("DECEMBER")
                
                @schemas.classproperty
                def APRIL(cls):
                    return cls("APRIL")
                
                @schemas.classproperty
                def JULY(cls):
                    return cls("JULY")
                
                @schemas.classproperty
                def SEPTEMBER(cls):
                    return cls("SEPTEMBER")
                
                @schemas.classproperty
                def JUNE(cls):
                    return cls("JUNE")
                
                @schemas.classproperty
                def FEBRUARY(cls):
                    return cls("FEBRUARY")
                
                @schemas.classproperty
                def OCTOBER(cls):
                    return cls("OCTOBER")
                
                @schemas.classproperty
                def AUGUST(cls):
                    return cls("AUGUST")
                
                @schemas.classproperty
                def NOVEMBER(cls):
                    return cls("NOVEMBER")
                
                @schemas.classproperty
                def MARCH(cls):
                    return cls("MARCH")
                
                @schemas.classproperty
                def MAY(cls):
                    return cls("MAY")
                
                @schemas.classproperty
                def JANUARY(cls):
                    return cls("JANUARY")
            __annotations__ = {
                "dayOfYear": dayOfYear,
                "leapYear": leapYear,
                "monthValue": monthValue,
                "dayOfMonth": dayOfMonth,
                "year": year,
                "chronology": chronology,
                "dayOfWeek": dayOfWeek,
                "era": era,
                "month": month,
            }
    
    dayOfMonth: MetaOapg.properties.dayOfMonth
    dayOfYear: MetaOapg.properties.dayOfYear
    year: MetaOapg.properties.year
    monthValue: MetaOapg.properties.monthValue
    leapYear: MetaOapg.properties.leapYear
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dayOfYear"]) -> MetaOapg.properties.dayOfYear: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leapYear"]) -> MetaOapg.properties.leapYear: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthValue"]) -> MetaOapg.properties.monthValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dayOfMonth"]) -> MetaOapg.properties.dayOfMonth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["year"]) -> MetaOapg.properties.year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chronology"]) -> 'IsoChronology': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dayOfWeek"]) -> MetaOapg.properties.dayOfWeek: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["era"]) -> 'Era': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["month"]) -> MetaOapg.properties.month: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dayOfYear", "leapYear", "monthValue", "dayOfMonth", "year", "chronology", "dayOfWeek", "era", "month", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dayOfYear"]) -> MetaOapg.properties.dayOfYear: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leapYear"]) -> MetaOapg.properties.leapYear: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthValue"]) -> MetaOapg.properties.monthValue: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dayOfMonth"]) -> MetaOapg.properties.dayOfMonth: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["year"]) -> MetaOapg.properties.year: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chronology"]) -> typing.Union['IsoChronology', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dayOfWeek"]) -> typing.Union[MetaOapg.properties.dayOfWeek, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["era"]) -> typing.Union['Era', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["month"]) -> typing.Union[MetaOapg.properties.month, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dayOfYear", "leapYear", "monthValue", "dayOfMonth", "year", "chronology", "dayOfWeek", "era", "month", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dayOfMonth: typing.Union[MetaOapg.properties.dayOfMonth, decimal.Decimal, int, ],
        dayOfYear: typing.Union[MetaOapg.properties.dayOfYear, decimal.Decimal, int, ],
        year: typing.Union[MetaOapg.properties.year, decimal.Decimal, int, ],
        monthValue: typing.Union[MetaOapg.properties.monthValue, decimal.Decimal, int, ],
        leapYear: typing.Union[MetaOapg.properties.leapYear, bool, ],
        chronology: typing.Union['IsoChronology', schemas.Unset] = schemas.unset,
        dayOfWeek: typing.Union[MetaOapg.properties.dayOfWeek, str, schemas.Unset] = schemas.unset,
        era: typing.Union['Era', schemas.Unset] = schemas.unset,
        month: typing.Union[MetaOapg.properties.month, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LocalDate':
        return super().__new__(
            cls,
            *args,
            dayOfMonth=dayOfMonth,
            dayOfYear=dayOfYear,
            year=year,
            monthValue=monthValue,
            leapYear=leapYear,
            chronology=chronology,
            dayOfWeek=dayOfWeek,
            era=era,
            month=month,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.era import Era
from beamable_python_sdk.model.iso_chronology import IsoChronology
