# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class MailSearchClause(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "onlyCount",
        }
        
        class properties:
            onlyCount = schemas.BoolSchema
            forSender = schemas.IntSchema
            name = schemas.StrSchema
        
            @staticmethod
            def categories() -> typing.Type['MailSearchClauseCategories']:
                return MailSearchClauseCategories
            start = schemas.IntSchema
            limit = schemas.IntSchema
        
            @staticmethod
            def states() -> typing.Type['MailSearchClauseStates']:
                return MailSearchClauseStates
            __annotations__ = {
                "onlyCount": onlyCount,
                "forSender": forSender,
                "name": name,
                "categories": categories,
                "start": start,
                "limit": limit,
                "states": states,
            }
    
    onlyCount: MetaOapg.properties.onlyCount
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onlyCount"]) -> MetaOapg.properties.onlyCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forSender"]) -> MetaOapg.properties.forSender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categories"]) -> 'MailSearchClauseCategories': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limit"]) -> MetaOapg.properties.limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["states"]) -> 'MailSearchClauseStates': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["onlyCount", "forSender", "name", "categories", "start", "limit", "states", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onlyCount"]) -> MetaOapg.properties.onlyCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forSender"]) -> typing.Union[MetaOapg.properties.forSender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categories"]) -> typing.Union['MailSearchClauseCategories', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> typing.Union[MetaOapg.properties.start, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limit"]) -> typing.Union[MetaOapg.properties.limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["states"]) -> typing.Union['MailSearchClauseStates', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["onlyCount", "forSender", "name", "categories", "start", "limit", "states", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        onlyCount: typing.Union[MetaOapg.properties.onlyCount, bool, ],
        forSender: typing.Union[MetaOapg.properties.forSender, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        categories: typing.Union['MailSearchClauseCategories', schemas.Unset] = schemas.unset,
        start: typing.Union[MetaOapg.properties.start, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        limit: typing.Union[MetaOapg.properties.limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        states: typing.Union['MailSearchClauseStates', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MailSearchClause':
        return super().__new__(
            cls,
            *args,
            onlyCount=onlyCount,
            forSender=forSender,
            name=name,
            categories=categories,
            start=start,
            limit=limit,
            states=states,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.mail_search_clause_categories import MailSearchClauseCategories
from beamable_python_sdk.model.mail_search_clause_states import MailSearchClauseStates
