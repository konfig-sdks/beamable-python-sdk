# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class Manifest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "created",
        }
        
        class properties:
            created = schemas.IntSchema
            id = schemas.StrSchema
            
            
            class manifest(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Reference']:
                        return Reference
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Reference'], typing.List['Reference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'manifest':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Reference':
                    return super().__getitem__(i)
            replacement = schemas.BoolSchema
            
            
            class references(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Reference']:
                        return Reference
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Reference'], typing.List['Reference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'references':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Reference':
                    return super().__getitem__(i)
            checksum = schemas.StrSchema
            __annotations__ = {
                "created": created,
                "id": id,
                "manifest": manifest,
                "replacement": replacement,
                "references": references,
                "checksum": checksum,
            }
    
    created: MetaOapg.properties.created
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manifest"]) -> MetaOapg.properties.manifest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replacement"]) -> MetaOapg.properties.replacement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["references"]) -> MetaOapg.properties.references: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checksum"]) -> MetaOapg.properties.checksum: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["created", "id", "manifest", "replacement", "references", "checksum", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manifest"]) -> typing.Union[MetaOapg.properties.manifest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replacement"]) -> typing.Union[MetaOapg.properties.replacement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["references"]) -> typing.Union[MetaOapg.properties.references, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checksum"]) -> typing.Union[MetaOapg.properties.checksum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created", "id", "manifest", "replacement", "references", "checksum", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        created: typing.Union[MetaOapg.properties.created, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        manifest: typing.Union[MetaOapg.properties.manifest, list, tuple, schemas.Unset] = schemas.unset,
        replacement: typing.Union[MetaOapg.properties.replacement, bool, schemas.Unset] = schemas.unset,
        references: typing.Union[MetaOapg.properties.references, list, tuple, schemas.Unset] = schemas.unset,
        checksum: typing.Union[MetaOapg.properties.checksum, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Manifest':
        return super().__new__(
            cls,
            *args,
            created=created,
            id=id,
            manifest=manifest,
            replacement=replacement,
            references=references,
            checksum=checksum,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.reference import Reference
