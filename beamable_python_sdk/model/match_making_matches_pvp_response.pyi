# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class MatchMakingMatchesPvpResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "totalEntries",
        }
        
        class properties:
            totalEntries = schemas.IntSchema
            result = schemas.StrSchema
        
            @staticmethod
            def playerRank() -> typing.Type['MatchMakingRanking']:
                return MatchMakingRanking
            
            
            class windows(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MatchMakingWindowResp']:
                        return MatchMakingWindowResp
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['MatchMakingWindowResp'], typing.List['MatchMakingWindowResp']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'windows':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MatchMakingWindowResp':
                    return super().__getitem__(i)
            __annotations__ = {
                "totalEntries": totalEntries,
                "result": result,
                "playerRank": playerRank,
                "windows": windows,
            }
    
    totalEntries: MetaOapg.properties.totalEntries
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalEntries"]) -> MetaOapg.properties.totalEntries: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["result"]) -> MetaOapg.properties.result: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playerRank"]) -> 'MatchMakingRanking': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["windows"]) -> MetaOapg.properties.windows: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["totalEntries", "result", "playerRank", "windows", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalEntries"]) -> MetaOapg.properties.totalEntries: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["result"]) -> typing.Union[MetaOapg.properties.result, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playerRank"]) -> typing.Union['MatchMakingRanking', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["windows"]) -> typing.Union[MetaOapg.properties.windows, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["totalEntries", "result", "playerRank", "windows", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        totalEntries: typing.Union[MetaOapg.properties.totalEntries, decimal.Decimal, int, ],
        result: typing.Union[MetaOapg.properties.result, str, schemas.Unset] = schemas.unset,
        playerRank: typing.Union['MatchMakingRanking', schemas.Unset] = schemas.unset,
        windows: typing.Union[MetaOapg.properties.windows, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MatchMakingMatchesPvpResponse':
        return super().__new__(
            cls,
            *args,
            totalEntries=totalEntries,
            result=result,
            playerRank=playerRank,
            windows=windows,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.match_making_ranking import MatchMakingRanking
from beamable_python_sdk.model.match_making_window_resp import MatchMakingWindowResp
