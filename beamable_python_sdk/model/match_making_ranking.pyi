# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class MatchMakingRanking(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "rank",
            "gt",
            "isUnranked",
        }
        
        class properties:
            gt = schemas.IntSchema
            rank = schemas.IntSchema
            isUnranked = schemas.BoolSchema
        
            @staticmethod
            def variables() -> typing.Type['MatchMakingRankingVariables']:
                return MatchMakingRankingVariables
            __annotations__ = {
                "gt": gt,
                "rank": rank,
                "isUnranked": isUnranked,
                "variables": variables,
            }
    
    rank: MetaOapg.properties.rank
    gt: MetaOapg.properties.gt
    isUnranked: MetaOapg.properties.isUnranked
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gt"]) -> MetaOapg.properties.gt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rank"]) -> MetaOapg.properties.rank: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isUnranked"]) -> MetaOapg.properties.isUnranked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variables"]) -> 'MatchMakingRankingVariables': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["gt", "rank", "isUnranked", "variables", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gt"]) -> MetaOapg.properties.gt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rank"]) -> MetaOapg.properties.rank: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isUnranked"]) -> MetaOapg.properties.isUnranked: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variables"]) -> typing.Union['MatchMakingRankingVariables', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["gt", "rank", "isUnranked", "variables", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        rank: typing.Union[MetaOapg.properties.rank, decimal.Decimal, int, ],
        gt: typing.Union[MetaOapg.properties.gt, decimal.Decimal, int, ],
        isUnranked: typing.Union[MetaOapg.properties.isUnranked, bool, ],
        variables: typing.Union['MatchMakingRankingVariables', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MatchMakingRanking':
        return super().__new__(
            cls,
            *args,
            rank=rank,
            gt=gt,
            isUnranked=isUnranked,
            variables=variables,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.match_making_ranking_variables import MatchMakingRankingVariables
