# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class MatchUpdate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "minPlayersReached",
            "gameStarted",
        }
        
        class properties:
            minPlayersReached = schemas.BoolSchema
            gameStarted = schemas.BoolSchema
        
            @staticmethod
            def players() -> typing.Type['MatchUpdatePlayers']:
                return MatchUpdatePlayers
            secondsRemaining = schemas.IntSchema
            game = schemas.StrSchema
            __annotations__ = {
                "minPlayersReached": minPlayersReached,
                "gameStarted": gameStarted,
                "players": players,
                "secondsRemaining": secondsRemaining,
                "game": game,
            }
    
    minPlayersReached: MetaOapg.properties.minPlayersReached
    gameStarted: MetaOapg.properties.gameStarted
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minPlayersReached"]) -> MetaOapg.properties.minPlayersReached: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gameStarted"]) -> MetaOapg.properties.gameStarted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["players"]) -> 'MatchUpdatePlayers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondsRemaining"]) -> MetaOapg.properties.secondsRemaining: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["game"]) -> MetaOapg.properties.game: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["minPlayersReached", "gameStarted", "players", "secondsRemaining", "game", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minPlayersReached"]) -> MetaOapg.properties.minPlayersReached: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gameStarted"]) -> MetaOapg.properties.gameStarted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["players"]) -> typing.Union['MatchUpdatePlayers', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondsRemaining"]) -> typing.Union[MetaOapg.properties.secondsRemaining, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["game"]) -> typing.Union[MetaOapg.properties.game, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["minPlayersReached", "gameStarted", "players", "secondsRemaining", "game", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        minPlayersReached: typing.Union[MetaOapg.properties.minPlayersReached, bool, ],
        gameStarted: typing.Union[MetaOapg.properties.gameStarted, bool, ],
        players: typing.Union['MatchUpdatePlayers', schemas.Unset] = schemas.unset,
        secondsRemaining: typing.Union[MetaOapg.properties.secondsRemaining, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        game: typing.Union[MetaOapg.properties.game, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MatchUpdate':
        return super().__new__(
            cls,
            *args,
            minPlayersReached=minPlayersReached,
            gameStarted=gameStarted,
            players=players,
            secondsRemaining=secondsRemaining,
            game=game,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.match_update_players import MatchUpdatePlayers
