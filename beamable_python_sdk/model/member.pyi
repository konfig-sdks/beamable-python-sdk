# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class Member(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "gamerTag",
        }
        
        class properties:
            gamerTag = schemas.IntSchema
            canDemote = schemas.BoolSchema
            canKick = schemas.BoolSchema
            role = schemas.StrSchema
            canPromote = schemas.BoolSchema
            
            
            class scores(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['GroupScoreBinding']:
                        return GroupScoreBinding
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['GroupScoreBinding'], typing.List['GroupScoreBinding']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scores':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'GroupScoreBinding':
                    return super().__getitem__(i)
            __annotations__ = {
                "gamerTag": gamerTag,
                "canDemote": canDemote,
                "canKick": canKick,
                "role": role,
                "canPromote": canPromote,
                "scores": scores,
            }
    
    gamerTag: MetaOapg.properties.gamerTag
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gamerTag"]) -> MetaOapg.properties.gamerTag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canDemote"]) -> MetaOapg.properties.canDemote: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canKick"]) -> MetaOapg.properties.canKick: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canPromote"]) -> MetaOapg.properties.canPromote: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scores"]) -> MetaOapg.properties.scores: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["gamerTag", "canDemote", "canKick", "role", "canPromote", "scores", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gamerTag"]) -> MetaOapg.properties.gamerTag: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canDemote"]) -> typing.Union[MetaOapg.properties.canDemote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canKick"]) -> typing.Union[MetaOapg.properties.canKick, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role"]) -> typing.Union[MetaOapg.properties.role, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canPromote"]) -> typing.Union[MetaOapg.properties.canPromote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scores"]) -> typing.Union[MetaOapg.properties.scores, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["gamerTag", "canDemote", "canKick", "role", "canPromote", "scores", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        gamerTag: typing.Union[MetaOapg.properties.gamerTag, decimal.Decimal, int, ],
        canDemote: typing.Union[MetaOapg.properties.canDemote, bool, schemas.Unset] = schemas.unset,
        canKick: typing.Union[MetaOapg.properties.canKick, bool, schemas.Unset] = schemas.unset,
        role: typing.Union[MetaOapg.properties.role, str, schemas.Unset] = schemas.unset,
        canPromote: typing.Union[MetaOapg.properties.canPromote, bool, schemas.Unset] = schemas.unset,
        scores: typing.Union[MetaOapg.properties.scores, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Member':
        return super().__new__(
            cls,
            *args,
            gamerTag=gamerTag,
            canDemote=canDemote,
            canKick=canKick,
            role=role,
            canPromote=canPromote,
            scores=scores,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.group_score_binding import GroupScoreBinding
