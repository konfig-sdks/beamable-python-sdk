# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class NotificationRequestData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def messageParams() -> typing.Type['NotificationRequestDataMessageParams']:
                return NotificationRequestDataMessageParams
            channel = schemas.StrSchema
            messageKey = schemas.StrSchema
            context = schemas.StrSchema
            shard = schemas.StrSchema
        
            @staticmethod
            def meta() -> typing.Type['NotificationRequestDataMeta']:
                return NotificationRequestDataMeta
            messageFull = schemas.StrSchema
            __annotations__ = {
                "messageParams": messageParams,
                "channel": channel,
                "messageKey": messageKey,
                "context": context,
                "shard": shard,
                "meta": meta,
                "messageFull": messageFull,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["messageParams"]) -> 'NotificationRequestDataMessageParams': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel"]) -> MetaOapg.properties.channel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["messageKey"]) -> MetaOapg.properties.messageKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["context"]) -> MetaOapg.properties.context: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shard"]) -> MetaOapg.properties.shard: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meta"]) -> 'NotificationRequestDataMeta': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["messageFull"]) -> MetaOapg.properties.messageFull: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["messageParams", "channel", "messageKey", "context", "shard", "meta", "messageFull", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["messageParams"]) -> typing.Union['NotificationRequestDataMessageParams', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> typing.Union[MetaOapg.properties.channel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["messageKey"]) -> typing.Union[MetaOapg.properties.messageKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["context"]) -> typing.Union[MetaOapg.properties.context, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shard"]) -> typing.Union[MetaOapg.properties.shard, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> typing.Union['NotificationRequestDataMeta', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["messageFull"]) -> typing.Union[MetaOapg.properties.messageFull, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["messageParams", "channel", "messageKey", "context", "shard", "meta", "messageFull", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        messageParams: typing.Union['NotificationRequestDataMessageParams', schemas.Unset] = schemas.unset,
        channel: typing.Union[MetaOapg.properties.channel, str, schemas.Unset] = schemas.unset,
        messageKey: typing.Union[MetaOapg.properties.messageKey, str, schemas.Unset] = schemas.unset,
        context: typing.Union[MetaOapg.properties.context, str, schemas.Unset] = schemas.unset,
        shard: typing.Union[MetaOapg.properties.shard, str, schemas.Unset] = schemas.unset,
        meta: typing.Union['NotificationRequestDataMeta', schemas.Unset] = schemas.unset,
        messageFull: typing.Union[MetaOapg.properties.messageFull, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NotificationRequestData':
        return super().__new__(
            cls,
            *args,
            messageParams=messageParams,
            channel=channel,
            messageKey=messageKey,
            context=context,
            shard=shard,
            meta=meta,
            messageFull=messageFull,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.notification_request_data_message_params import NotificationRequestDataMessageParams
from beamable_python_sdk.model.notification_request_data_meta import NotificationRequestDataMeta
