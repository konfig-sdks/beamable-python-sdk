# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class PaymentAuditEntry(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "txid",
            "gt",
        }
        
        class properties:
            txid = schemas.IntSchema
            gt = schemas.IntSchema
            version = schemas.StrSchema
            
            
            class inFlight(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['InFlightMessage']:
                        return InFlightMessage
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['InFlightMessage'], typing.List['InFlightMessage']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'inFlight':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'InFlightMessage':
                    return super().__getitem__(i)
            providerid = schemas.StrSchema
            
            
            class history(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PaymentHistoryEntry']:
                        return PaymentHistoryEntry
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PaymentHistoryEntry'], typing.List['PaymentHistoryEntry']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'history':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PaymentHistoryEntry':
                    return super().__getitem__(i)
            providername = schemas.StrSchema
            
            
            class obtainItems(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ItemCreateRequest']:
                        return ItemCreateRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ItemCreateRequest'], typing.List['ItemCreateRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'obtainItems':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ItemCreateRequest':
                    return super().__getitem__(i)
            txstate = schemas.StrSchema
            updated = schemas.IntSchema
            
            
            class obtainCurrency(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CurrencyChange']:
                        return CurrencyChange
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CurrencyChange'], typing.List['CurrencyChange']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'obtainCurrency':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CurrencyChange':
                    return super().__getitem__(i)
            
            
            class entitlements(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EntitlementGenerator']:
                        return EntitlementGenerator
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EntitlementGenerator'], typing.List['EntitlementGenerator']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'entitlements':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EntitlementGenerator':
                    return super().__getitem__(i)
        
            @staticmethod
            def details() -> typing.Type['PaymentDetailsEntry']:
                return PaymentDetailsEntry
            replayGuardValue = schemas.StrSchema
            created = schemas.IntSchema
            __annotations__ = {
                "txid": txid,
                "gt": gt,
                "version": version,
                "inFlight": inFlight,
                "providerid": providerid,
                "history": history,
                "providername": providername,
                "obtainItems": obtainItems,
                "txstate": txstate,
                "updated": updated,
                "obtainCurrency": obtainCurrency,
                "entitlements": entitlements,
                "details": details,
                "replayGuardValue": replayGuardValue,
                "created": created,
            }
    
    txid: MetaOapg.properties.txid
    gt: MetaOapg.properties.gt
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["txid"]) -> MetaOapg.properties.txid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gt"]) -> MetaOapg.properties.gt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inFlight"]) -> MetaOapg.properties.inFlight: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providerid"]) -> MetaOapg.properties.providerid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["history"]) -> MetaOapg.properties.history: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providername"]) -> MetaOapg.properties.providername: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["obtainItems"]) -> MetaOapg.properties.obtainItems: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["txstate"]) -> MetaOapg.properties.txstate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["obtainCurrency"]) -> MetaOapg.properties.obtainCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entitlements"]) -> MetaOapg.properties.entitlements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["details"]) -> 'PaymentDetailsEntry': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replayGuardValue"]) -> MetaOapg.properties.replayGuardValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["txid", "gt", "version", "inFlight", "providerid", "history", "providername", "obtainItems", "txstate", "updated", "obtainCurrency", "entitlements", "details", "replayGuardValue", "created", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["txid"]) -> MetaOapg.properties.txid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gt"]) -> MetaOapg.properties.gt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inFlight"]) -> typing.Union[MetaOapg.properties.inFlight, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providerid"]) -> typing.Union[MetaOapg.properties.providerid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["history"]) -> typing.Union[MetaOapg.properties.history, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providername"]) -> typing.Union[MetaOapg.properties.providername, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["obtainItems"]) -> typing.Union[MetaOapg.properties.obtainItems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["txstate"]) -> typing.Union[MetaOapg.properties.txstate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> typing.Union[MetaOapg.properties.updated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["obtainCurrency"]) -> typing.Union[MetaOapg.properties.obtainCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entitlements"]) -> typing.Union[MetaOapg.properties.entitlements, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["details"]) -> typing.Union['PaymentDetailsEntry', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replayGuardValue"]) -> typing.Union[MetaOapg.properties.replayGuardValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["txid", "gt", "version", "inFlight", "providerid", "history", "providername", "obtainItems", "txstate", "updated", "obtainCurrency", "entitlements", "details", "replayGuardValue", "created", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        txid: typing.Union[MetaOapg.properties.txid, decimal.Decimal, int, ],
        gt: typing.Union[MetaOapg.properties.gt, decimal.Decimal, int, ],
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        inFlight: typing.Union[MetaOapg.properties.inFlight, list, tuple, schemas.Unset] = schemas.unset,
        providerid: typing.Union[MetaOapg.properties.providerid, str, schemas.Unset] = schemas.unset,
        history: typing.Union[MetaOapg.properties.history, list, tuple, schemas.Unset] = schemas.unset,
        providername: typing.Union[MetaOapg.properties.providername, str, schemas.Unset] = schemas.unset,
        obtainItems: typing.Union[MetaOapg.properties.obtainItems, list, tuple, schemas.Unset] = schemas.unset,
        txstate: typing.Union[MetaOapg.properties.txstate, str, schemas.Unset] = schemas.unset,
        updated: typing.Union[MetaOapg.properties.updated, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        obtainCurrency: typing.Union[MetaOapg.properties.obtainCurrency, list, tuple, schemas.Unset] = schemas.unset,
        entitlements: typing.Union[MetaOapg.properties.entitlements, list, tuple, schemas.Unset] = schemas.unset,
        details: typing.Union['PaymentDetailsEntry', schemas.Unset] = schemas.unset,
        replayGuardValue: typing.Union[MetaOapg.properties.replayGuardValue, str, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentAuditEntry':
        return super().__new__(
            cls,
            *args,
            txid=txid,
            gt=gt,
            version=version,
            inFlight=inFlight,
            providerid=providerid,
            history=history,
            providername=providername,
            obtainItems=obtainItems,
            txstate=txstate,
            updated=updated,
            obtainCurrency=obtainCurrency,
            entitlements=entitlements,
            details=details,
            replayGuardValue=replayGuardValue,
            created=created,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.currency_change import CurrencyChange
from beamable_python_sdk.model.entitlement_generator import EntitlementGenerator
from beamable_python_sdk.model.in_flight_message import InFlightMessage
from beamable_python_sdk.model.item_create_request import ItemCreateRequest
from beamable_python_sdk.model.payment_details_entry import PaymentDetailsEntry
from beamable_python_sdk.model.payment_history_entry import PaymentHistoryEntry
