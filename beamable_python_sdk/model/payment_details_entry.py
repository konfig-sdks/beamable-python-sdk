# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class PaymentDetailsEntry(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "quantity",
            "price",
        }
        
        class properties:
            quantity = schemas.IntSchema
            price = schemas.IntSchema
            reference = schemas.StrSchema
            name = schemas.StrSchema
            sku = schemas.StrSchema
            subcategory = schemas.StrSchema
            gameplace = schemas.StrSchema
            localPrice = schemas.StrSchema
            category = schemas.StrSchema
            localCurrency = schemas.StrSchema
            providerProductId = schemas.StrSchema
            __annotations__ = {
                "quantity": quantity,
                "price": price,
                "reference": reference,
                "name": name,
                "sku": sku,
                "subcategory": subcategory,
                "gameplace": gameplace,
                "localPrice": localPrice,
                "category": category,
                "localCurrency": localCurrency,
                "providerProductId": providerProductId,
            }
    
    quantity: MetaOapg.properties.quantity
    price: MetaOapg.properties.price
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference"]) -> MetaOapg.properties.reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subcategory"]) -> MetaOapg.properties.subcategory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gameplace"]) -> MetaOapg.properties.gameplace: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localPrice"]) -> MetaOapg.properties.localPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localCurrency"]) -> MetaOapg.properties.localCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providerProductId"]) -> MetaOapg.properties.providerProductId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["quantity", "price", "reference", "name", "sku", "subcategory", "gameplace", "localPrice", "category", "localCurrency", "providerProductId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference"]) -> typing.Union[MetaOapg.properties.reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sku"]) -> typing.Union[MetaOapg.properties.sku, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subcategory"]) -> typing.Union[MetaOapg.properties.subcategory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gameplace"]) -> typing.Union[MetaOapg.properties.gameplace, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localPrice"]) -> typing.Union[MetaOapg.properties.localPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localCurrency"]) -> typing.Union[MetaOapg.properties.localCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providerProductId"]) -> typing.Union[MetaOapg.properties.providerProductId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["quantity", "price", "reference", "name", "sku", "subcategory", "gameplace", "localPrice", "category", "localCurrency", "providerProductId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, ],
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, ],
        reference: typing.Union[MetaOapg.properties.reference, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        sku: typing.Union[MetaOapg.properties.sku, str, schemas.Unset] = schemas.unset,
        subcategory: typing.Union[MetaOapg.properties.subcategory, str, schemas.Unset] = schemas.unset,
        gameplace: typing.Union[MetaOapg.properties.gameplace, str, schemas.Unset] = schemas.unset,
        localPrice: typing.Union[MetaOapg.properties.localPrice, str, schemas.Unset] = schemas.unset,
        category: typing.Union[MetaOapg.properties.category, str, schemas.Unset] = schemas.unset,
        localCurrency: typing.Union[MetaOapg.properties.localCurrency, str, schemas.Unset] = schemas.unset,
        providerProductId: typing.Union[MetaOapg.properties.providerProductId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentDetailsEntry':
        return super().__new__(
            cls,
            *args,
            quantity=quantity,
            price=price,
            reference=reference,
            name=name,
            sku=sku,
            subcategory=subcategory,
            gameplace=gameplace,
            localPrice=localPrice,
            category=category,
            localCurrency=localCurrency,
            providerProductId=providerProductId,
            _configuration=_configuration,
            **kwargs,
        )
