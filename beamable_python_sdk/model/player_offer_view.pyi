# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class PlayerOfferView(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "coupons",
        }
        
        class properties:
            coupons = schemas.IntSchema
        
            @staticmethod
            def price() -> typing.Type['Price']:
                return Price
            buttonText = schemas.StrSchema
        
            @staticmethod
            def titles() -> typing.Type['PlayerOfferViewTitles']:
                return PlayerOfferViewTitles
            symbol = schemas.StrSchema
            
            
            class obtainItems(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ItemCreateRequest']:
                        return ItemCreateRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ItemCreateRequest'], typing.List['ItemCreateRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'obtainItems':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ItemCreateRequest':
                    return super().__getitem__(i)
            
            
            class obtainCurrency(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CurrencyChange']:
                        return CurrencyChange
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CurrencyChange'], typing.List['CurrencyChange']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'obtainCurrency':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CurrencyChange':
                    return super().__getitem__(i)
        
            @staticmethod
            def images() -> typing.Type['PlayerOfferViewImages']:
                return PlayerOfferViewImages
        
            @staticmethod
            def descriptions() -> typing.Type['PlayerOfferViewDescriptions']:
                return PlayerOfferViewDescriptions
        
            @staticmethod
            def obtain() -> typing.Type['PlayerOfferViewObtain']:
                return PlayerOfferViewObtain
            __annotations__ = {
                "coupons": coupons,
                "price": price,
                "buttonText": buttonText,
                "titles": titles,
                "symbol": symbol,
                "obtainItems": obtainItems,
                "obtainCurrency": obtainCurrency,
                "images": images,
                "descriptions": descriptions,
                "obtain": obtain,
            }
    
    coupons: MetaOapg.properties.coupons
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coupons"]) -> MetaOapg.properties.coupons: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> 'Price': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buttonText"]) -> MetaOapg.properties.buttonText: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["titles"]) -> 'PlayerOfferViewTitles': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["obtainItems"]) -> MetaOapg.properties.obtainItems: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["obtainCurrency"]) -> MetaOapg.properties.obtainCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["images"]) -> 'PlayerOfferViewImages': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["descriptions"]) -> 'PlayerOfferViewDescriptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["obtain"]) -> 'PlayerOfferViewObtain': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["coupons", "price", "buttonText", "titles", "symbol", "obtainItems", "obtainCurrency", "images", "descriptions", "obtain", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coupons"]) -> MetaOapg.properties.coupons: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> typing.Union['Price', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buttonText"]) -> typing.Union[MetaOapg.properties.buttonText, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["titles"]) -> typing.Union['PlayerOfferViewTitles', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> typing.Union[MetaOapg.properties.symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["obtainItems"]) -> typing.Union[MetaOapg.properties.obtainItems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["obtainCurrency"]) -> typing.Union[MetaOapg.properties.obtainCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["images"]) -> typing.Union['PlayerOfferViewImages', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["descriptions"]) -> typing.Union['PlayerOfferViewDescriptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["obtain"]) -> typing.Union['PlayerOfferViewObtain', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["coupons", "price", "buttonText", "titles", "symbol", "obtainItems", "obtainCurrency", "images", "descriptions", "obtain", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        coupons: typing.Union[MetaOapg.properties.coupons, decimal.Decimal, int, ],
        price: typing.Union['Price', schemas.Unset] = schemas.unset,
        buttonText: typing.Union[MetaOapg.properties.buttonText, str, schemas.Unset] = schemas.unset,
        titles: typing.Union['PlayerOfferViewTitles', schemas.Unset] = schemas.unset,
        symbol: typing.Union[MetaOapg.properties.symbol, str, schemas.Unset] = schemas.unset,
        obtainItems: typing.Union[MetaOapg.properties.obtainItems, list, tuple, schemas.Unset] = schemas.unset,
        obtainCurrency: typing.Union[MetaOapg.properties.obtainCurrency, list, tuple, schemas.Unset] = schemas.unset,
        images: typing.Union['PlayerOfferViewImages', schemas.Unset] = schemas.unset,
        descriptions: typing.Union['PlayerOfferViewDescriptions', schemas.Unset] = schemas.unset,
        obtain: typing.Union['PlayerOfferViewObtain', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PlayerOfferView':
        return super().__new__(
            cls,
            *args,
            coupons=coupons,
            price=price,
            buttonText=buttonText,
            titles=titles,
            symbol=symbol,
            obtainItems=obtainItems,
            obtainCurrency=obtainCurrency,
            images=images,
            descriptions=descriptions,
            obtain=obtain,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.currency_change import CurrencyChange
from beamable_python_sdk.model.item_create_request import ItemCreateRequest
from beamable_python_sdk.model.player_offer_view_descriptions import PlayerOfferViewDescriptions
from beamable_python_sdk.model.player_offer_view_images import PlayerOfferViewImages
from beamable_python_sdk.model.player_offer_view_obtain import PlayerOfferViewObtain
from beamable_python_sdk.model.player_offer_view_titles import PlayerOfferViewTitles
from beamable_python_sdk.model.price import Price
