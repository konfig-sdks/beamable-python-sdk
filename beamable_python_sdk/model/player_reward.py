# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class PlayerReward(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            
            
            class addItemRequests(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ItemCreateRequest']:
                        return ItemCreateRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ItemCreateRequest'], typing.List['ItemCreateRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'addItemRequests':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ItemCreateRequest':
                    return super().__getitem__(i)
            
            
            class changeCurrencies(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CurrencyChangeReward']:
                        return CurrencyChangeReward
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CurrencyChangeReward'], typing.List['CurrencyChangeReward']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'changeCurrencies':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CurrencyChangeReward':
                    return super().__getitem__(i)
            
            
            class callWebhooks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WebhookReward']:
                        return WebhookReward
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['WebhookReward'], typing.List['WebhookReward']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'callWebhooks':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WebhookReward':
                    return super().__getitem__(i)
            
            
            class addItems(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NewItemReward']:
                        return NewItemReward
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['NewItemReward'], typing.List['NewItemReward']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'addItems':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NewItemReward':
                    return super().__getitem__(i)
            applyVipBonus = schemas.BoolSchema
        
            @staticmethod
            def addCurrencyMap() -> typing.Type['PlayerRewardAddCurrencyMap']:
                return PlayerRewardAddCurrencyMap
            __annotations__ = {
                "description": description,
                "addItemRequests": addItemRequests,
                "changeCurrencies": changeCurrencies,
                "callWebhooks": callWebhooks,
                "addItems": addItems,
                "applyVipBonus": applyVipBonus,
                "addCurrencyMap": addCurrencyMap,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addItemRequests"]) -> MetaOapg.properties.addItemRequests: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changeCurrencies"]) -> MetaOapg.properties.changeCurrencies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["callWebhooks"]) -> MetaOapg.properties.callWebhooks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addItems"]) -> MetaOapg.properties.addItems: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applyVipBonus"]) -> MetaOapg.properties.applyVipBonus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addCurrencyMap"]) -> 'PlayerRewardAddCurrencyMap': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "addItemRequests", "changeCurrencies", "callWebhooks", "addItems", "applyVipBonus", "addCurrencyMap", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addItemRequests"]) -> typing.Union[MetaOapg.properties.addItemRequests, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changeCurrencies"]) -> typing.Union[MetaOapg.properties.changeCurrencies, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["callWebhooks"]) -> typing.Union[MetaOapg.properties.callWebhooks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addItems"]) -> typing.Union[MetaOapg.properties.addItems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applyVipBonus"]) -> typing.Union[MetaOapg.properties.applyVipBonus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addCurrencyMap"]) -> typing.Union['PlayerRewardAddCurrencyMap', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "addItemRequests", "changeCurrencies", "callWebhooks", "addItems", "applyVipBonus", "addCurrencyMap", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        addItemRequests: typing.Union[MetaOapg.properties.addItemRequests, list, tuple, schemas.Unset] = schemas.unset,
        changeCurrencies: typing.Union[MetaOapg.properties.changeCurrencies, list, tuple, schemas.Unset] = schemas.unset,
        callWebhooks: typing.Union[MetaOapg.properties.callWebhooks, list, tuple, schemas.Unset] = schemas.unset,
        addItems: typing.Union[MetaOapg.properties.addItems, list, tuple, schemas.Unset] = schemas.unset,
        applyVipBonus: typing.Union[MetaOapg.properties.applyVipBonus, bool, schemas.Unset] = schemas.unset,
        addCurrencyMap: typing.Union['PlayerRewardAddCurrencyMap', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PlayerReward':
        return super().__new__(
            cls,
            *args,
            description=description,
            addItemRequests=addItemRequests,
            changeCurrencies=changeCurrencies,
            callWebhooks=callWebhooks,
            addItems=addItems,
            applyVipBonus=applyVipBonus,
            addCurrencyMap=addCurrencyMap,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.currency_change_reward import CurrencyChangeReward
from beamable_python_sdk.model.item_create_request import ItemCreateRequest
from beamable_python_sdk.model.new_item_reward import NewItemReward
from beamable_python_sdk.model.player_reward_add_currency_map import PlayerRewardAddCurrencyMap
from beamable_python_sdk.model.webhook_reward import WebhookReward
