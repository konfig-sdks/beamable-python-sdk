# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class Project(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "archived",
            "root",
            "customCharts",
            "name",
            "secret",
            "plan",
        }
        
        class properties:
            secret = schemas.StrSchema
            name = schemas.StrSchema
        
            @staticmethod
            def customCharts() -> typing.Type['ProjectCustomCharts']:
                return ProjectCustomCharts
            root = schemas.BoolSchema
            archived = schemas.BoolSchema
            plan = schemas.StrSchema
            displayName = schemas.StrSchema
            parent = schemas.StrSchema
        
            @staticmethod
            def children() -> typing.Type['ProjectChildren']:
                return ProjectChildren
        
            @staticmethod
            def config() -> typing.Type['ProjectConfig']:
                return ProjectConfig
            status = schemas.StrSchema
            sharded = schemas.BoolSchema
            sigval = schemas.BoolSchema
            created = schemas.Int64Schema
            __annotations__ = {
                "secret": secret,
                "name": name,
                "customCharts": customCharts,
                "root": root,
                "archived": archived,
                "plan": plan,
                "displayName": displayName,
                "parent": parent,
                "children": children,
                "config": config,
                "status": status,
                "sharded": sharded,
                "sigval": sigval,
                "created": created,
            }
    
    archived: MetaOapg.properties.archived
    root: MetaOapg.properties.root
    customCharts: 'ProjectCustomCharts'
    name: MetaOapg.properties.name
    secret: MetaOapg.properties.secret
    plan: MetaOapg.properties.plan
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customCharts"]) -> 'ProjectCustomCharts': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["root"]) -> MetaOapg.properties.root: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plan"]) -> MetaOapg.properties.plan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent"]) -> MetaOapg.properties.parent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["children"]) -> 'ProjectChildren': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["config"]) -> 'ProjectConfig': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sharded"]) -> MetaOapg.properties.sharded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sigval"]) -> MetaOapg.properties.sigval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["secret", "name", "customCharts", "root", "archived", "plan", "displayName", "parent", "children", "config", "status", "sharded", "sigval", "created", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customCharts"]) -> 'ProjectCustomCharts': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["root"]) -> MetaOapg.properties.root: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plan"]) -> MetaOapg.properties.plan: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent"]) -> typing.Union[MetaOapg.properties.parent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["children"]) -> typing.Union['ProjectChildren', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["config"]) -> typing.Union['ProjectConfig', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sharded"]) -> typing.Union[MetaOapg.properties.sharded, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sigval"]) -> typing.Union[MetaOapg.properties.sigval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["secret", "name", "customCharts", "root", "archived", "plan", "displayName", "parent", "children", "config", "status", "sharded", "sigval", "created", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        archived: typing.Union[MetaOapg.properties.archived, bool, ],
        root: typing.Union[MetaOapg.properties.root, bool, ],
        customCharts: 'ProjectCustomCharts',
        name: typing.Union[MetaOapg.properties.name, str, ],
        secret: typing.Union[MetaOapg.properties.secret, str, ],
        plan: typing.Union[MetaOapg.properties.plan, str, ],
        displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
        parent: typing.Union[MetaOapg.properties.parent, str, schemas.Unset] = schemas.unset,
        children: typing.Union['ProjectChildren', schemas.Unset] = schemas.unset,
        config: typing.Union['ProjectConfig', schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        sharded: typing.Union[MetaOapg.properties.sharded, bool, schemas.Unset] = schemas.unset,
        sigval: typing.Union[MetaOapg.properties.sigval, bool, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Project':
        return super().__new__(
            cls,
            *args,
            archived=archived,
            root=root,
            customCharts=customCharts,
            name=name,
            secret=secret,
            plan=plan,
            displayName=displayName,
            parent=parent,
            children=children,
            config=config,
            status=status,
            sharded=sharded,
            sigval=sigval,
            created=created,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.project_children import ProjectChildren
from beamable_python_sdk.model.project_config import ProjectConfig
from beamable_python_sdk.model.project_custom_charts import ProjectCustomCharts
