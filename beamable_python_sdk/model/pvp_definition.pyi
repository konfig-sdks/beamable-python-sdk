# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class PvpDefinition(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "state",
        }
        
        class properties:
            state = schemas.IntSchema
            description = schemas.StrSchema
            nextReward = schemas.IntSchema
            lbid = schemas.StrSchema
            idleDays = schemas.IntSchema
            cron = schemas.StrSchema
        
            @staticmethod
            def rewardDefinition() -> typing.Type['PvpRewardDefinition']:
                return PvpRewardDefinition
            protectedRanks = schemas.IntSchema
            minPlayers = schemas.IntSchema
            __annotations__ = {
                "state": state,
                "description": description,
                "nextReward": nextReward,
                "lbid": lbid,
                "idleDays": idleDays,
                "cron": cron,
                "rewardDefinition": rewardDefinition,
                "protectedRanks": protectedRanks,
                "minPlayers": minPlayers,
            }
    
    state: MetaOapg.properties.state
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextReward"]) -> MetaOapg.properties.nextReward: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lbid"]) -> MetaOapg.properties.lbid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idleDays"]) -> MetaOapg.properties.idleDays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cron"]) -> MetaOapg.properties.cron: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rewardDefinition"]) -> 'PvpRewardDefinition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protectedRanks"]) -> MetaOapg.properties.protectedRanks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minPlayers"]) -> MetaOapg.properties.minPlayers: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["state", "description", "nextReward", "lbid", "idleDays", "cron", "rewardDefinition", "protectedRanks", "minPlayers", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextReward"]) -> typing.Union[MetaOapg.properties.nextReward, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lbid"]) -> typing.Union[MetaOapg.properties.lbid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idleDays"]) -> typing.Union[MetaOapg.properties.idleDays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cron"]) -> typing.Union[MetaOapg.properties.cron, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rewardDefinition"]) -> typing.Union['PvpRewardDefinition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protectedRanks"]) -> typing.Union[MetaOapg.properties.protectedRanks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minPlayers"]) -> typing.Union[MetaOapg.properties.minPlayers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["state", "description", "nextReward", "lbid", "idleDays", "cron", "rewardDefinition", "protectedRanks", "minPlayers", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        state: typing.Union[MetaOapg.properties.state, decimal.Decimal, int, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        nextReward: typing.Union[MetaOapg.properties.nextReward, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        lbid: typing.Union[MetaOapg.properties.lbid, str, schemas.Unset] = schemas.unset,
        idleDays: typing.Union[MetaOapg.properties.idleDays, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cron: typing.Union[MetaOapg.properties.cron, str, schemas.Unset] = schemas.unset,
        rewardDefinition: typing.Union['PvpRewardDefinition', schemas.Unset] = schemas.unset,
        protectedRanks: typing.Union[MetaOapg.properties.protectedRanks, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minPlayers: typing.Union[MetaOapg.properties.minPlayers, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PvpDefinition':
        return super().__new__(
            cls,
            *args,
            state=state,
            description=description,
            nextReward=nextReward,
            lbid=lbid,
            idleDays=idleDays,
            cron=cron,
            rewardDefinition=rewardDefinition,
            protectedRanks=protectedRanks,
            minPlayers=minPlayers,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.pvp_reward_definition import PvpRewardDefinition
