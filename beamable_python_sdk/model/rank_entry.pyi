# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class RankEntry(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "rank",
            "gt",
        }
        
        class properties:
            rank = schemas.Int64Schema
            gt = schemas.Int64Schema
            
            
            class stats(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RankEntryStat']:
                        return RankEntryStat
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['RankEntryStat'], typing.List['RankEntryStat']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'stats':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RankEntryStat':
                    return super().__getitem__(i)
            score = schemas.Float64Schema
        
            @staticmethod
            def columns() -> typing.Type['RankEntryColumns']:
                return RankEntryColumns
            __annotations__ = {
                "rank": rank,
                "gt": gt,
                "stats": stats,
                "score": score,
                "columns": columns,
            }
    
    rank: MetaOapg.properties.rank
    gt: MetaOapg.properties.gt
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rank"]) -> MetaOapg.properties.rank: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gt"]) -> MetaOapg.properties.gt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stats"]) -> MetaOapg.properties.stats: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["columns"]) -> 'RankEntryColumns': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["rank", "gt", "stats", "score", "columns", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rank"]) -> MetaOapg.properties.rank: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gt"]) -> MetaOapg.properties.gt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stats"]) -> typing.Union[MetaOapg.properties.stats, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["score"]) -> typing.Union[MetaOapg.properties.score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["columns"]) -> typing.Union['RankEntryColumns', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["rank", "gt", "stats", "score", "columns", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        rank: typing.Union[MetaOapg.properties.rank, decimal.Decimal, int, ],
        gt: typing.Union[MetaOapg.properties.gt, decimal.Decimal, int, ],
        stats: typing.Union[MetaOapg.properties.stats, list, tuple, schemas.Unset] = schemas.unset,
        score: typing.Union[MetaOapg.properties.score, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        columns: typing.Union['RankEntryColumns', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RankEntry':
        return super().__new__(
            cls,
            *args,
            rank=rank,
            gt=gt,
            stats=stats,
            score=score,
            columns=columns,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.rank_entry_columns import RankEntryColumns
from beamable_python_sdk.model.rank_entry_stat import RankEntryStat
