# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class Schedule(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
        
            @staticmethod
            def crons() -> typing.Type['ScheduleCrons']:
                return ScheduleCrons
            activeTo = schemas.StrSchema
            activeFrom = schemas.StrSchema
            
            
            class definitions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ScheduleDefinition']:
                        return ScheduleDefinition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ScheduleDefinition'], typing.List['ScheduleDefinition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'definitions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ScheduleDefinition':
                    return super().__getitem__(i)
            __annotations__ = {
                "description": description,
                "crons": crons,
                "activeTo": activeTo,
                "activeFrom": activeFrom,
                "definitions": definitions,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crons"]) -> 'ScheduleCrons': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activeTo"]) -> MetaOapg.properties.activeTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activeFrom"]) -> MetaOapg.properties.activeFrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["definitions"]) -> MetaOapg.properties.definitions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "crons", "activeTo", "activeFrom", "definitions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crons"]) -> typing.Union['ScheduleCrons', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activeTo"]) -> typing.Union[MetaOapg.properties.activeTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activeFrom"]) -> typing.Union[MetaOapg.properties.activeFrom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["definitions"]) -> typing.Union[MetaOapg.properties.definitions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "crons", "activeTo", "activeFrom", "definitions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        crons: typing.Union['ScheduleCrons', schemas.Unset] = schemas.unset,
        activeTo: typing.Union[MetaOapg.properties.activeTo, str, schemas.Unset] = schemas.unset,
        activeFrom: typing.Union[MetaOapg.properties.activeFrom, str, schemas.Unset] = schemas.unset,
        definitions: typing.Union[MetaOapg.properties.definitions, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Schedule':
        return super().__new__(
            cls,
            *args,
            description=description,
            crons=crons,
            activeTo=activeTo,
            activeFrom=activeFrom,
            definitions=definitions,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.schedule_crons import ScheduleCrons
from beamable_python_sdk.model.schedule_definition import ScheduleDefinition
