# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class ScheduleDefinition(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def dayOfWeek() -> typing.Type['ScheduleDefinitionDayOfWeek']:
                return ScheduleDefinitionDayOfWeek
        
            @staticmethod
            def minute() -> typing.Type['ScheduleDefinitionMinute']:
                return ScheduleDefinitionMinute
        
            @staticmethod
            def dayOfMonth() -> typing.Type['ScheduleDefinitionDayOfMonth']:
                return ScheduleDefinitionDayOfMonth
        
            @staticmethod
            def year() -> typing.Type['ScheduleDefinitionYear']:
                return ScheduleDefinitionYear
        
            @staticmethod
            def hour() -> typing.Type['ScheduleDefinitionHour']:
                return ScheduleDefinitionHour
        
            @staticmethod
            def second() -> typing.Type['ScheduleDefinitionSecond']:
                return ScheduleDefinitionSecond
        
            @staticmethod
            def month() -> typing.Type['ScheduleDefinitionMonth']:
                return ScheduleDefinitionMonth
            __annotations__ = {
                "dayOfWeek": dayOfWeek,
                "minute": minute,
                "dayOfMonth": dayOfMonth,
                "year": year,
                "hour": hour,
                "second": second,
                "month": month,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dayOfWeek"]) -> 'ScheduleDefinitionDayOfWeek': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minute"]) -> 'ScheduleDefinitionMinute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dayOfMonth"]) -> 'ScheduleDefinitionDayOfMonth': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["year"]) -> 'ScheduleDefinitionYear': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hour"]) -> 'ScheduleDefinitionHour': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["second"]) -> 'ScheduleDefinitionSecond': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["month"]) -> 'ScheduleDefinitionMonth': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dayOfWeek", "minute", "dayOfMonth", "year", "hour", "second", "month", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dayOfWeek"]) -> typing.Union['ScheduleDefinitionDayOfWeek', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minute"]) -> typing.Union['ScheduleDefinitionMinute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dayOfMonth"]) -> typing.Union['ScheduleDefinitionDayOfMonth', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["year"]) -> typing.Union['ScheduleDefinitionYear', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hour"]) -> typing.Union['ScheduleDefinitionHour', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["second"]) -> typing.Union['ScheduleDefinitionSecond', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["month"]) -> typing.Union['ScheduleDefinitionMonth', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dayOfWeek", "minute", "dayOfMonth", "year", "hour", "second", "month", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dayOfWeek: typing.Union['ScheduleDefinitionDayOfWeek', schemas.Unset] = schemas.unset,
        minute: typing.Union['ScheduleDefinitionMinute', schemas.Unset] = schemas.unset,
        dayOfMonth: typing.Union['ScheduleDefinitionDayOfMonth', schemas.Unset] = schemas.unset,
        year: typing.Union['ScheduleDefinitionYear', schemas.Unset] = schemas.unset,
        hour: typing.Union['ScheduleDefinitionHour', schemas.Unset] = schemas.unset,
        second: typing.Union['ScheduleDefinitionSecond', schemas.Unset] = schemas.unset,
        month: typing.Union['ScheduleDefinitionMonth', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ScheduleDefinition':
        return super().__new__(
            cls,
            *args,
            dayOfWeek=dayOfWeek,
            minute=minute,
            dayOfMonth=dayOfMonth,
            year=year,
            hour=hour,
            second=second,
            month=month,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.schedule_definition_day_of_month import ScheduleDefinitionDayOfMonth
from beamable_python_sdk.model.schedule_definition_day_of_week import ScheduleDefinitionDayOfWeek
from beamable_python_sdk.model.schedule_definition_hour import ScheduleDefinitionHour
from beamable_python_sdk.model.schedule_definition_minute import ScheduleDefinitionMinute
from beamable_python_sdk.model.schedule_definition_month import ScheduleDefinitionMonth
from beamable_python_sdk.model.schedule_definition_second import ScheduleDefinitionSecond
from beamable_python_sdk.model.schedule_definition_year import ScheduleDefinitionYear
