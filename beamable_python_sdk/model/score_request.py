# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class ScoreRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "score",
            "playerId",
        }
        
        class properties:
            score = schemas.NumberSchema
            playerId = schemas.IntSchema
            tournamentId = schemas.StrSchema
        
            @staticmethod
            def stats() -> typing.Type['ScoreRequestStats']:
                return ScoreRequestStats
            increment = schemas.BoolSchema
            __annotations__ = {
                "score": score,
                "playerId": playerId,
                "tournamentId": tournamentId,
                "stats": stats,
                "increment": increment,
            }
    
    score: MetaOapg.properties.score
    playerId: MetaOapg.properties.playerId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playerId"]) -> MetaOapg.properties.playerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tournamentId"]) -> MetaOapg.properties.tournamentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stats"]) -> 'ScoreRequestStats': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["increment"]) -> MetaOapg.properties.increment: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["score", "playerId", "tournamentId", "stats", "increment", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playerId"]) -> MetaOapg.properties.playerId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tournamentId"]) -> typing.Union[MetaOapg.properties.tournamentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stats"]) -> typing.Union['ScoreRequestStats', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["increment"]) -> typing.Union[MetaOapg.properties.increment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["score", "playerId", "tournamentId", "stats", "increment", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        score: typing.Union[MetaOapg.properties.score, decimal.Decimal, int, float, ],
        playerId: typing.Union[MetaOapg.properties.playerId, decimal.Decimal, int, ],
        tournamentId: typing.Union[MetaOapg.properties.tournamentId, str, schemas.Unset] = schemas.unset,
        stats: typing.Union['ScoreRequestStats', schemas.Unset] = schemas.unset,
        increment: typing.Union[MetaOapg.properties.increment, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ScoreRequest':
        return super().__new__(
            cls,
            *args,
            score=score,
            playerId=playerId,
            tournamentId=tournamentId,
            stats=stats,
            increment=increment,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.score_request_stats import ScoreRequestStats
