# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class SendMsg(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def to() -> typing.Type['SendMsgTo']:
                return SendMsgTo
        
            @staticmethod
            def notification() -> typing.Type['SendNotification']:
                return SendNotification
        
            @staticmethod
            def data() -> typing.Type['SendMsgData']:
                return SendMsgData
            __annotations__ = {
                "to": to,
                "notification": notification,
                "data": data,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> 'SendMsgTo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notification"]) -> 'SendNotification': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> 'SendMsgData': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["to", "notification", "data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> typing.Union['SendMsgTo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notification"]) -> typing.Union['SendNotification', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union['SendMsgData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["to", "notification", "data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        to: typing.Union['SendMsgTo', schemas.Unset] = schemas.unset,
        notification: typing.Union['SendNotification', schemas.Unset] = schemas.unset,
        data: typing.Union['SendMsgData', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SendMsg':
        return super().__new__(
            cls,
            *args,
            to=to,
            notification=notification,
            data=data,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.send_msg_data import SendMsgData
from beamable_python_sdk.model.send_msg_to import SendMsgTo
from beamable_python_sdk.model.send_notification import SendNotification
