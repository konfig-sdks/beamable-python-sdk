# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class ServiceLimits(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def beamo() -> typing.Type['BeamoLimits']:
                return BeamoLimits
        
            @staticmethod
            def content() -> typing.Type['ContentLimits']:
                return ContentLimits
        
            @staticmethod
            def gateway() -> typing.Type['GatewayLimits']:
                return GatewayLimits
            __annotations__ = {
                "beamo": beamo,
                "content": content,
                "gateway": gateway,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamo"]) -> 'BeamoLimits': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content"]) -> 'ContentLimits': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gateway"]) -> 'GatewayLimits': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["beamo", "content", "gateway", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamo"]) -> typing.Union['BeamoLimits', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content"]) -> typing.Union['ContentLimits', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gateway"]) -> typing.Union['GatewayLimits', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["beamo", "content", "gateway", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        beamo: typing.Union['BeamoLimits', schemas.Unset] = schemas.unset,
        content: typing.Union['ContentLimits', schemas.Unset] = schemas.unset,
        gateway: typing.Union['GatewayLimits', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ServiceLimits':
        return super().__new__(
            cls,
            *args,
            beamo=beamo,
            content=content,
            gateway=gateway,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.beamo_limits import BeamoLimits
from beamable_python_sdk.model.content_limits import ContentLimits
from beamable_python_sdk.model.gateway_limits import GatewayLimits
