# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class SessionHistoryResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "daysPlayed",
        }
        
        class properties:
            daysPlayed = schemas.IntSchema
        
            @staticmethod
            def payments() -> typing.Type['SessionHistoryResponsePayments']:
                return SessionHistoryResponsePayments
            
            
            class totalPaid(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PaymentTotal']:
                        return PaymentTotal
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PaymentTotal'], typing.List['PaymentTotal']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'totalPaid':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PaymentTotal':
                    return super().__getitem__(i)
        
            @staticmethod
            def sessions() -> typing.Type['SessionHistoryResponseSessions']:
                return SessionHistoryResponseSessions
        
            @staticmethod
            def date() -> typing.Type['LocalDate']:
                return LocalDate
            installDate = schemas.StrSchema
            __annotations__ = {
                "daysPlayed": daysPlayed,
                "payments": payments,
                "totalPaid": totalPaid,
                "sessions": sessions,
                "date": date,
                "installDate": installDate,
            }
    
    daysPlayed: MetaOapg.properties.daysPlayed
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daysPlayed"]) -> MetaOapg.properties.daysPlayed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payments"]) -> 'SessionHistoryResponsePayments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalPaid"]) -> MetaOapg.properties.totalPaid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessions"]) -> 'SessionHistoryResponseSessions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> 'LocalDate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["installDate"]) -> MetaOapg.properties.installDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["daysPlayed", "payments", "totalPaid", "sessions", "date", "installDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daysPlayed"]) -> MetaOapg.properties.daysPlayed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payments"]) -> typing.Union['SessionHistoryResponsePayments', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalPaid"]) -> typing.Union[MetaOapg.properties.totalPaid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessions"]) -> typing.Union['SessionHistoryResponseSessions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union['LocalDate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["installDate"]) -> typing.Union[MetaOapg.properties.installDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["daysPlayed", "payments", "totalPaid", "sessions", "date", "installDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        daysPlayed: typing.Union[MetaOapg.properties.daysPlayed, decimal.Decimal, int, ],
        payments: typing.Union['SessionHistoryResponsePayments', schemas.Unset] = schemas.unset,
        totalPaid: typing.Union[MetaOapg.properties.totalPaid, list, tuple, schemas.Unset] = schemas.unset,
        sessions: typing.Union['SessionHistoryResponseSessions', schemas.Unset] = schemas.unset,
        date: typing.Union['LocalDate', schemas.Unset] = schemas.unset,
        installDate: typing.Union[MetaOapg.properties.installDate, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SessionHistoryResponse':
        return super().__new__(
            cls,
            *args,
            daysPlayed=daysPlayed,
            payments=payments,
            totalPaid=totalPaid,
            sessions=sessions,
            date=date,
            installDate=installDate,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.local_date import LocalDate
from beamable_python_sdk.model.payment_total import PaymentTotal
from beamable_python_sdk.model.session_history_response_payments import SessionHistoryResponsePayments
from beamable_python_sdk.model.session_history_response_sessions import SessionHistoryResponseSessions
