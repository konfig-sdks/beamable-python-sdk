# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class StartSessionRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            source = schemas.StrSchema
        
            @staticmethod
            def customParams() -> typing.Type['StartSessionRequestCustomParams']:
                return StartSessionRequestCustomParams
            shard = schemas.StrSchema
            locale = schemas.StrSchema
        
            @staticmethod
            def deviceParams() -> typing.Type['StartSessionRequestDeviceParams']:
                return StartSessionRequestDeviceParams
        
            @staticmethod
            def language() -> typing.Type['SessionLanguageContext']:
                return SessionLanguageContext
            time = schemas.IntSchema
            platform = schemas.StrSchema
            gamer = schemas.IntSchema
            device = schemas.StrSchema
            __annotations__ = {
                "source": source,
                "customParams": customParams,
                "shard": shard,
                "locale": locale,
                "deviceParams": deviceParams,
                "language": language,
                "time": time,
                "platform": platform,
                "gamer": gamer,
                "device": device,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customParams"]) -> 'StartSessionRequestCustomParams': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shard"]) -> MetaOapg.properties.shard: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locale"]) -> MetaOapg.properties.locale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deviceParams"]) -> 'StartSessionRequestDeviceParams': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> 'SessionLanguageContext': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gamer"]) -> MetaOapg.properties.gamer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device"]) -> MetaOapg.properties.device: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["source", "customParams", "shard", "locale", "deviceParams", "language", "time", "platform", "gamer", "device", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customParams"]) -> typing.Union['StartSessionRequestCustomParams', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shard"]) -> typing.Union[MetaOapg.properties.shard, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locale"]) -> typing.Union[MetaOapg.properties.locale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deviceParams"]) -> typing.Union['StartSessionRequestDeviceParams', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union['SessionLanguageContext', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> typing.Union[MetaOapg.properties.time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> typing.Union[MetaOapg.properties.platform, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gamer"]) -> typing.Union[MetaOapg.properties.gamer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device"]) -> typing.Union[MetaOapg.properties.device, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["source", "customParams", "shard", "locale", "deviceParams", "language", "time", "platform", "gamer", "device", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        customParams: typing.Union['StartSessionRequestCustomParams', schemas.Unset] = schemas.unset,
        shard: typing.Union[MetaOapg.properties.shard, str, schemas.Unset] = schemas.unset,
        locale: typing.Union[MetaOapg.properties.locale, str, schemas.Unset] = schemas.unset,
        deviceParams: typing.Union['StartSessionRequestDeviceParams', schemas.Unset] = schemas.unset,
        language: typing.Union['SessionLanguageContext', schemas.Unset] = schemas.unset,
        time: typing.Union[MetaOapg.properties.time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        platform: typing.Union[MetaOapg.properties.platform, str, schemas.Unset] = schemas.unset,
        gamer: typing.Union[MetaOapg.properties.gamer, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        device: typing.Union[MetaOapg.properties.device, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StartSessionRequest':
        return super().__new__(
            cls,
            *args,
            source=source,
            customParams=customParams,
            shard=shard,
            locale=locale,
            deviceParams=deviceParams,
            language=language,
            time=time,
            platform=platform,
            gamer=gamer,
            device=device,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.session_language_context import SessionLanguageContext
from beamable_python_sdk.model.start_session_request_custom_params import StartSessionRequestCustomParams
from beamable_python_sdk.model.start_session_request_device_params import StartSessionRequestDeviceParams
