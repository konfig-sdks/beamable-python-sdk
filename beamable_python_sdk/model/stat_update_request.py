# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class StatUpdateRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            objectId = schemas.StrSchema
        
            @staticmethod
            def set() -> typing.Type['StatUpdateRequestSet']:
                return StatUpdateRequestSet
        
            @staticmethod
            def add() -> typing.Type['StatUpdateRequestAdd']:
                return StatUpdateRequestAdd
            emitAnalytics = schemas.BoolSchema
            __annotations__ = {
                "objectId": objectId,
                "set": set,
                "add": add,
                "emitAnalytics": emitAnalytics,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objectId"]) -> MetaOapg.properties.objectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["set"]) -> 'StatUpdateRequestSet': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["add"]) -> 'StatUpdateRequestAdd': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emitAnalytics"]) -> MetaOapg.properties.emitAnalytics: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["objectId", "set", "add", "emitAnalytics", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objectId"]) -> typing.Union[MetaOapg.properties.objectId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["set"]) -> typing.Union['StatUpdateRequestSet', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["add"]) -> typing.Union['StatUpdateRequestAdd', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emitAnalytics"]) -> typing.Union[MetaOapg.properties.emitAnalytics, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["objectId", "set", "add", "emitAnalytics", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        objectId: typing.Union[MetaOapg.properties.objectId, str, schemas.Unset] = schemas.unset,
        set: typing.Union['StatUpdateRequestSet', schemas.Unset] = schemas.unset,
        add: typing.Union['StatUpdateRequestAdd', schemas.Unset] = schemas.unset,
        emitAnalytics: typing.Union[MetaOapg.properties.emitAnalytics, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StatUpdateRequest':
        return super().__new__(
            cls,
            *args,
            objectId=objectId,
            set=set,
            add=add,
            emitAnalytics=emitAnalytics,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.stat_update_request_add import StatUpdateRequestAdd
from beamable_python_sdk.model.stat_update_request_set import StatUpdateRequestSet
