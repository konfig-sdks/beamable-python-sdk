# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class SteamOrderInfoItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "itemid",
            "amount",
            "qty",
            "vat",
        }
        
        class properties:
            vat = schemas.IntSchema
            amount = schemas.IntSchema
            itemid = schemas.IntSchema
            qty = schemas.IntSchema
            itemstatus = schemas.StrSchema
            __annotations__ = {
                "vat": vat,
                "amount": amount,
                "itemid": itemid,
                "qty": qty,
                "itemstatus": itemstatus,
            }
    
    itemid: MetaOapg.properties.itemid
    amount: MetaOapg.properties.amount
    qty: MetaOapg.properties.qty
    vat: MetaOapg.properties.vat
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vat"]) -> MetaOapg.properties.vat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemid"]) -> MetaOapg.properties.itemid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qty"]) -> MetaOapg.properties.qty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemstatus"]) -> MetaOapg.properties.itemstatus: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["vat", "amount", "itemid", "qty", "itemstatus", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vat"]) -> MetaOapg.properties.vat: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemid"]) -> MetaOapg.properties.itemid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qty"]) -> MetaOapg.properties.qty: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemstatus"]) -> typing.Union[MetaOapg.properties.itemstatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["vat", "amount", "itemid", "qty", "itemstatus", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        itemid: typing.Union[MetaOapg.properties.itemid, decimal.Decimal, int, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, ],
        qty: typing.Union[MetaOapg.properties.qty, decimal.Decimal, int, ],
        vat: typing.Union[MetaOapg.properties.vat, decimal.Decimal, int, ],
        itemstatus: typing.Union[MetaOapg.properties.itemstatus, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SteamOrderInfoItem':
        return super().__new__(
            cls,
            *args,
            itemid=itemid,
            amount=amount,
            qty=qty,
            vat=vat,
            itemstatus=itemstatus,
            _configuration=_configuration,
            **kwargs,
        )
