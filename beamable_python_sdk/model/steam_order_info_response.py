# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class SteamOrderInfoResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "steamid",
            "orderid",
            "transid",
        }
        
        class properties:
            transid = schemas.IntSchema
            orderid = schemas.IntSchema
            steamid = schemas.IntSchema
            usstate = schemas.StrSchema
            
            
            class items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SteamOrderInfoItem']:
                        return SteamOrderInfoItem
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SteamOrderInfoItem'], typing.List['SteamOrderInfoItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'items':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SteamOrderInfoItem':
                    return super().__getitem__(i)
            country = schemas.StrSchema
            timecreated = schemas.StrSchema
            status = schemas.StrSchema
            currency = schemas.StrSchema
            time = schemas.StrSchema
            __annotations__ = {
                "transid": transid,
                "orderid": orderid,
                "steamid": steamid,
                "usstate": usstate,
                "items": items,
                "country": country,
                "timecreated": timecreated,
                "status": status,
                "currency": currency,
                "time": time,
            }
    
    steamid: MetaOapg.properties.steamid
    orderid: MetaOapg.properties.orderid
    transid: MetaOapg.properties.transid
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transid"]) -> MetaOapg.properties.transid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderid"]) -> MetaOapg.properties.orderid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["steamid"]) -> MetaOapg.properties.steamid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usstate"]) -> MetaOapg.properties.usstate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timecreated"]) -> MetaOapg.properties.timecreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["transid", "orderid", "steamid", "usstate", "items", "country", "timecreated", "status", "currency", "time", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transid"]) -> MetaOapg.properties.transid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderid"]) -> MetaOapg.properties.orderid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["steamid"]) -> MetaOapg.properties.steamid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usstate"]) -> typing.Union[MetaOapg.properties.usstate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union[MetaOapg.properties.items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timecreated"]) -> typing.Union[MetaOapg.properties.timecreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> typing.Union[MetaOapg.properties.time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transid", "orderid", "steamid", "usstate", "items", "country", "timecreated", "status", "currency", "time", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        steamid: typing.Union[MetaOapg.properties.steamid, decimal.Decimal, int, ],
        orderid: typing.Union[MetaOapg.properties.orderid, decimal.Decimal, int, ],
        transid: typing.Union[MetaOapg.properties.transid, decimal.Decimal, int, ],
        usstate: typing.Union[MetaOapg.properties.usstate, str, schemas.Unset] = schemas.unset,
        items: typing.Union[MetaOapg.properties.items, list, tuple, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        timecreated: typing.Union[MetaOapg.properties.timecreated, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        time: typing.Union[MetaOapg.properties.time, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SteamOrderInfoResponse':
        return super().__new__(
            cls,
            *args,
            steamid=steamid,
            orderid=orderid,
            transid=transid,
            usstate=usstate,
            items=items,
            country=country,
            timecreated=timecreated,
            status=status,
            currency=currency,
            time=time,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.steam_order_info_item import SteamOrderInfoItem
