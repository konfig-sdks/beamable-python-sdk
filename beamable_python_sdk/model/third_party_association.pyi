# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class ThirdPartyAssociation(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "userAppId",
            "meta",
            "appId",
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            userAppId = schemas.StrSchema
        
            @staticmethod
            def meta() -> typing.Type['ThirdPartyAssociationMeta']:
                return ThirdPartyAssociationMeta
            appId = schemas.StrSchema
            email = schemas.StrSchema
            userBusinessId = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "userAppId": userAppId,
                "meta": meta,
                "appId": appId,
                "email": email,
                "userBusinessId": userBusinessId,
            }
    
    userAppId: MetaOapg.properties.userAppId
    meta: 'ThirdPartyAssociationMeta'
    appId: MetaOapg.properties.appId
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userAppId"]) -> MetaOapg.properties.userAppId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meta"]) -> 'ThirdPartyAssociationMeta': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appId"]) -> MetaOapg.properties.appId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userBusinessId"]) -> MetaOapg.properties.userBusinessId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "userAppId", "meta", "appId", "email", "userBusinessId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userAppId"]) -> MetaOapg.properties.userAppId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> 'ThirdPartyAssociationMeta': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appId"]) -> MetaOapg.properties.appId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userBusinessId"]) -> typing.Union[MetaOapg.properties.userBusinessId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "userAppId", "meta", "appId", "email", "userBusinessId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        userAppId: typing.Union[MetaOapg.properties.userAppId, str, ],
        meta: 'ThirdPartyAssociationMeta',
        appId: typing.Union[MetaOapg.properties.appId, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        userBusinessId: typing.Union[MetaOapg.properties.userBusinessId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ThirdPartyAssociation':
        return super().__new__(
            cls,
            *args,
            userAppId=userAppId,
            meta=meta,
            appId=appId,
            name=name,
            email=email,
            userBusinessId=userBusinessId,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.third_party_association_meta import ThirdPartyAssociationMeta
