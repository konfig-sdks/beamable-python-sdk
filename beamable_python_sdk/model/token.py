# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class Token(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "created",
            "cid",
        }
        
        class properties:
            cid = schemas.IntSchema
            created = schemas.IntSchema
            gamerTag = schemas.IntSchema
        
            @staticmethod
            def scopes() -> typing.Type['TokenScopes']:
                return TokenScopes
            accountId = schemas.IntSchema
            pid = schemas.StrSchema
            expiresMs = schemas.IntSchema
            token = schemas.StrSchema
            type = schemas.StrSchema
            __annotations__ = {
                "cid": cid,
                "created": created,
                "gamerTag": gamerTag,
                "scopes": scopes,
                "accountId": accountId,
                "pid": pid,
                "expiresMs": expiresMs,
                "token": token,
                "type": type,
            }
    
    created: MetaOapg.properties.created
    cid: MetaOapg.properties.cid
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gamerTag"]) -> MetaOapg.properties.gamerTag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> 'TokenScopes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pid"]) -> MetaOapg.properties.pid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiresMs"]) -> MetaOapg.properties.expiresMs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cid", "created", "gamerTag", "scopes", "accountId", "pid", "expiresMs", "token", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gamerTag"]) -> typing.Union[MetaOapg.properties.gamerTag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> typing.Union['TokenScopes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountId"]) -> typing.Union[MetaOapg.properties.accountId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pid"]) -> typing.Union[MetaOapg.properties.pid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiresMs"]) -> typing.Union[MetaOapg.properties.expiresMs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token"]) -> typing.Union[MetaOapg.properties.token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cid", "created", "gamerTag", "scopes", "accountId", "pid", "expiresMs", "token", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        created: typing.Union[MetaOapg.properties.created, decimal.Decimal, int, ],
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, ],
        gamerTag: typing.Union[MetaOapg.properties.gamerTag, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        scopes: typing.Union['TokenScopes', schemas.Unset] = schemas.unset,
        accountId: typing.Union[MetaOapg.properties.accountId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pid: typing.Union[MetaOapg.properties.pid, str, schemas.Unset] = schemas.unset,
        expiresMs: typing.Union[MetaOapg.properties.expiresMs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        token: typing.Union[MetaOapg.properties.token, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Token':
        return super().__new__(
            cls,
            *args,
            created=created,
            cid=cid,
            gamerTag=gamerTag,
            scopes=scopes,
            accountId=accountId,
            pid=pid,
            expiresMs=expiresMs,
            token=token,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.token_scopes import TokenScopes
