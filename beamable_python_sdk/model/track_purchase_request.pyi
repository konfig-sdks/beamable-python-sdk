# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class TrackPurchaseRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "priceInLocalCurrency",
        }
        
        class properties:
            priceInLocalCurrency = schemas.NumberSchema
            skuName = schemas.StrSchema
            skuProductId = schemas.StrSchema
            store = schemas.StrSchema
            
            
            class obtainItems(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ItemCreateRequest']:
                        return ItemCreateRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ItemCreateRequest'], typing.List['ItemCreateRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'obtainItems':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ItemCreateRequest':
                    return super().__getitem__(i)
            
            
            class obtainCurrency(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CurrencyChange']:
                        return CurrencyChange
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CurrencyChange'], typing.List['CurrencyChange']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'obtainCurrency':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CurrencyChange':
                    return super().__getitem__(i)
            purchaseId = schemas.StrSchema
            isoCurrencySymbol = schemas.StrSchema
            __annotations__ = {
                "priceInLocalCurrency": priceInLocalCurrency,
                "skuName": skuName,
                "skuProductId": skuProductId,
                "store": store,
                "obtainItems": obtainItems,
                "obtainCurrency": obtainCurrency,
                "purchaseId": purchaseId,
                "isoCurrencySymbol": isoCurrencySymbol,
            }
    
    priceInLocalCurrency: MetaOapg.properties.priceInLocalCurrency
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priceInLocalCurrency"]) -> MetaOapg.properties.priceInLocalCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skuName"]) -> MetaOapg.properties.skuName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skuProductId"]) -> MetaOapg.properties.skuProductId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["store"]) -> MetaOapg.properties.store: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["obtainItems"]) -> MetaOapg.properties.obtainItems: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["obtainCurrency"]) -> MetaOapg.properties.obtainCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchaseId"]) -> MetaOapg.properties.purchaseId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isoCurrencySymbol"]) -> MetaOapg.properties.isoCurrencySymbol: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["priceInLocalCurrency", "skuName", "skuProductId", "store", "obtainItems", "obtainCurrency", "purchaseId", "isoCurrencySymbol", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priceInLocalCurrency"]) -> MetaOapg.properties.priceInLocalCurrency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skuName"]) -> typing.Union[MetaOapg.properties.skuName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skuProductId"]) -> typing.Union[MetaOapg.properties.skuProductId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["store"]) -> typing.Union[MetaOapg.properties.store, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["obtainItems"]) -> typing.Union[MetaOapg.properties.obtainItems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["obtainCurrency"]) -> typing.Union[MetaOapg.properties.obtainCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchaseId"]) -> typing.Union[MetaOapg.properties.purchaseId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isoCurrencySymbol"]) -> typing.Union[MetaOapg.properties.isoCurrencySymbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["priceInLocalCurrency", "skuName", "skuProductId", "store", "obtainItems", "obtainCurrency", "purchaseId", "isoCurrencySymbol", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        priceInLocalCurrency: typing.Union[MetaOapg.properties.priceInLocalCurrency, decimal.Decimal, int, float, ],
        skuName: typing.Union[MetaOapg.properties.skuName, str, schemas.Unset] = schemas.unset,
        skuProductId: typing.Union[MetaOapg.properties.skuProductId, str, schemas.Unset] = schemas.unset,
        store: typing.Union[MetaOapg.properties.store, str, schemas.Unset] = schemas.unset,
        obtainItems: typing.Union[MetaOapg.properties.obtainItems, list, tuple, schemas.Unset] = schemas.unset,
        obtainCurrency: typing.Union[MetaOapg.properties.obtainCurrency, list, tuple, schemas.Unset] = schemas.unset,
        purchaseId: typing.Union[MetaOapg.properties.purchaseId, str, schemas.Unset] = schemas.unset,
        isoCurrencySymbol: typing.Union[MetaOapg.properties.isoCurrencySymbol, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TrackPurchaseRequest':
        return super().__new__(
            cls,
            *args,
            priceInLocalCurrency=priceInLocalCurrency,
            skuName=skuName,
            skuProductId=skuProductId,
            store=store,
            obtainItems=obtainItems,
            obtainCurrency=obtainCurrency,
            purchaseId=purchaseId,
            isoCurrencySymbol=isoCurrencySymbol,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.currency_change import CurrencyChange
from beamable_python_sdk.model.item_create_request import ItemCreateRequest
