# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class UploadRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "sizeInBytes",
        }
        
        class properties:
            sizeInBytes = schemas.IntSchema
            objectKey = schemas.StrSchema
            lastModified = schemas.IntSchema
            checksum = schemas.StrSchema
            
            
            class metadata(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MetadataPair']:
                        return MetadataPair
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['MetadataPair'], typing.List['MetadataPair']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'metadata':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MetadataPair':
                    return super().__getitem__(i)
            __annotations__ = {
                "sizeInBytes": sizeInBytes,
                "objectKey": objectKey,
                "lastModified": lastModified,
                "checksum": checksum,
                "metadata": metadata,
            }
    
    sizeInBytes: MetaOapg.properties.sizeInBytes
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sizeInBytes"]) -> MetaOapg.properties.sizeInBytes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objectKey"]) -> MetaOapg.properties.objectKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastModified"]) -> MetaOapg.properties.lastModified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checksum"]) -> MetaOapg.properties.checksum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sizeInBytes", "objectKey", "lastModified", "checksum", "metadata", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sizeInBytes"]) -> MetaOapg.properties.sizeInBytes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objectKey"]) -> typing.Union[MetaOapg.properties.objectKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastModified"]) -> typing.Union[MetaOapg.properties.lastModified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checksum"]) -> typing.Union[MetaOapg.properties.checksum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sizeInBytes", "objectKey", "lastModified", "checksum", "metadata", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        sizeInBytes: typing.Union[MetaOapg.properties.sizeInBytes, decimal.Decimal, int, ],
        objectKey: typing.Union[MetaOapg.properties.objectKey, str, schemas.Unset] = schemas.unset,
        lastModified: typing.Union[MetaOapg.properties.lastModified, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        checksum: typing.Union[MetaOapg.properties.checksum, str, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UploadRequest':
        return super().__new__(
            cls,
            *args,
            sizeInBytes=sizeInBytes,
            objectKey=objectKey,
            lastModified=lastModified,
            checksum=checksum,
            metadata=metadata,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.metadata_pair import MetadataPair
