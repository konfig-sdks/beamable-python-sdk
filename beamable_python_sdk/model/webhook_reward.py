# coding: utf-8

"""
    history basic

    var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.

    The version of the OpenAPI document: 1.0
    Contact: support@beamable.com
    Created by: https://api.beamable.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beamable_python_sdk import schemas  # noqa: F401


class WebhookReward(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            webhookSymbol = schemas.StrSchema
        
            @staticmethod
            def strategy() -> typing.Type['WebhookInvocationStrategy']:
                return WebhookInvocationStrategy
        
            @staticmethod
            def webHookComet() -> typing.Type['WebhookComet']:
                return WebhookComet
            __annotations__ = {
                "webhookSymbol": webhookSymbol,
                "strategy": strategy,
                "webHookComet": webHookComet,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhookSymbol"]) -> MetaOapg.properties.webhookSymbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["strategy"]) -> 'WebhookInvocationStrategy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webHookComet"]) -> 'WebhookComet': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["webhookSymbol", "strategy", "webHookComet", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhookSymbol"]) -> typing.Union[MetaOapg.properties.webhookSymbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["strategy"]) -> typing.Union['WebhookInvocationStrategy', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webHookComet"]) -> typing.Union['WebhookComet', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["webhookSymbol", "strategy", "webHookComet", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        webhookSymbol: typing.Union[MetaOapg.properties.webhookSymbol, str, schemas.Unset] = schemas.unset,
        strategy: typing.Union['WebhookInvocationStrategy', schemas.Unset] = schemas.unset,
        webHookComet: typing.Union['WebhookComet', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebhookReward':
        return super().__new__(
            cls,
            *args,
            webhookSymbol=webhookSymbol,
            strategy=strategy,
            webHookComet=webHookComet,
            _configuration=_configuration,
            **kwargs,
        )

from beamable_python_sdk.model.webhook_comet import WebhookComet
from beamable_python_sdk.model.webhook_invocation_strategy import WebhookInvocationStrategy
